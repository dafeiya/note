jquery基础

======1.简介=======================================================================================

1.1 jquery的作用

	取得文档中的元素。
	修改页面的外观。它提供了跨浏览器的标准解决方案。而且,即使在页面已经呈现之后,jQuery仍然能够改 变文档中某个部分的类或者个别的样式属性。
$('ul > li:first').addClass('active');

	改变文档的内容。可以改变文本、插入或翻转图像、列表重新排序,甚至对
HTML文档的整个结构都能重写和扩充
$('#container').append('<a href="more.html">more</a>');

	响应用户的交互操作,Query提供了截获形形色色的页面事件(比如用户单击某个链接)
的适当方式,而不需要使用事件处理程序拆散HTML代码。

	为页面添加动态效果。为了实现某种交互式行为,设计者也必须向用户提供视觉上的反
馈。$('div.details').slideDown();

	无需刷新页面从服务器获取信息。Ajax
$('div.details').load('more.html #content')

	连缀就像是一口气说出一大段话——虽然效率很高,但对别人来说可能会难于理

	隐式迭代机制
=============================================================================================
重点api:

parseFloat()					在一个字符串中从左到右地查找一个浮点(十进制)数,还会去掉末尾的非数字字符,如果字符串本身以一个非数字开头,那么 parseFloat() 会返回 NaN
parseInt()						与上面类似,区别为查找一个十进制整数
--------------------------------------------------------------------

.is(selector)					接收一个选择符表达式,然后用选择符来测试当前的jQuery对象。如果集合中至少有一个元素与选择符匹配, 则返回 true 。							
$("#div").is('button')			测试id=div的元素是否包含 button 标签						

.addClass(.class)				为jQuery对象增加额外样式
.removeClass([.class])			移除指定的类样式.方法的参数是可选的,即当省略参数时,该方法会移除元素中所有的类
.toggleClass()					自动根据相应的类是否存在而添加或删除类
.toggle()						自动隐藏/显示对象

.css()							修改内联 CSS
	.css('property')			取得单个属性的值
	.css(['property1', 'property-2'])		取得多个属性的值:返回{"property1": "value1", "property-2": "value2"}
	.css('property', 'value')	设置单个属性及其值
	.css({						设置多个属性和值,(这些键值的集合叫对象字面量,是在代码中直接创建的JavaScript对象。)
		property1: 'value1',
		'property-2': 'value2'
	})
--------------------------------------------------------------------
.next()							只选择下一个最接近的同辈元素
.nextAll()						选其后的全部同辈元素单元格
.prev()							与.next()对应
.prevAll()						与.nextAll()对应
.siblings()						选择处于相同dom层次的所有元素
.addBack()						连缀时加带初始的jQuery对象
$('td:contains(Henry)').nextAll().addBack()		.addBack()方法,使单元格中再包含原来的单元格(即包含Henry的那个单元格),可以添加 .addBack()方法
$('td:contains(Henry)').parent().children()

.find(selector)					从已有的对象中查找
		.find('td:eq(1)') //在父元素中查找第2个单元格
.end()							回到最近一个"改变集合"的操作之前,即讲匹配的元素列表回退为上一次的状态.如果之前没有"改变集合"的操作,则返回一个空集

.filter(selector|fn)			筛选函数,利用jQuery的隐式迭代能力,保持代码的简洁	
		$('tr:even')可以用filter方法 $('tr').filter(':even')  ,此外.filter()功能十分强大, 因为它可以接受函数参数 
		$('a').filter(function() {
			return this.hostname && this.hostname != location.hostname;
		})
--------------------------------------------------------------------
.on(events,fn)					为jQuery对象指定任何DOM事件,并为该事件添加一种行为			
	$('#alert').on('click', function() {
		alert("click the button");
	});
.off(events,[selector],[fn])	与.on()相反,移除绑定在jQuery对象上的指定事件,无参数时移除所有事件

.one(events,fn)					事件只需触发一次,随后要立即解除绑定的简写方法,即自动.on(),并且一次触发的事件后自动.off()

.trigger()						模拟事件的操作,此外,.trigger() 方法提供了一组与 .on() 方法相同的简写方法。当使用这些方法而不带参数时,结果将是触发操作而不是绑定行为

.hover(fn_over,fn_out)			悬停事件, 可以避免JavaScript中的事件传播(event propagation)
.mouseenter() 和 mouseleave()	鼠标移动事件,可以避免冒泡问题

--------------------------------------------------------------------
.show(time), .hide(time)				显示和隐藏元素,.css('display','string') 方法的简写方式,可传入数字,指定动画的时长,单位毫秒
	hide()会同时减少元素的高度、宽度和不透明度,直至这3个属性的值都达到0,与此同时会为该元素应用CSS规则 display:none。而 .show(' duration ') 方法则会从上到下增大元素的高度,从左到右增大 元素的宽度,同时从0到1增加元素的不透明度,直至其内容完全可见。							
.toggle()						自动隐藏/显示对象

.fadeIn(time), .fadeOut(time)			淡入淡出

.slideUp(time), .slideDown(time)		滑上滑下,这两个动画方法仅改变元素的高度 。







======2.选择元素=======================================================================================

	祖先元素/后代元素/子元素/父元素/同辈元素

	使用 $() 函数创建jQuery对象,这个函数接受CSS选择符作为参数,充当一个工厂,返回包含页面中对应元素的jQuery对象,美元符号 $ 只不过标识符 jQuery 的“别名”
	编写代码时应缓存选择符以避免重复遍历DOM,例如:
	var $firstPara = $('p').eq(1);
	if ($firstPara.is(':hidden')) {
		//......
	}

jquery中的选择符:

选择符				CSS							jQuery									说 明
.....................................................................................................................................................
标签名				P {}					    $('p')									取得文档中所有的段落
ID					#some-id {}					$('#some-id')							取得文档中ID为 some-id 的一个元素
类					.some-class {}				$('.some-class')						取得文档中类为 some-class 的所有元素
子元素组合符( > )								$('#some-id > li')						查找ID为sone-id的元素(#sone-id)的子元素( > )中所有的列表项( li )
否定式伪类选择符(:not(selector))				$('#some-id li:not(.className)')		选择ID为some-id的原始的子元素中所有class属性非className的li
.....................................................................................................................................................
属性选择符[]									$('img[alt]')							选择带有 alt 属性的所有图像元素
			^ 表示值在字符串的开始				$('a[href^="mail:"]')					选择带有href属性,并且属性值以mail:开头的所有<a>标签
			$ 表示值在字符串的结尾				$('a[href$=".pdf"]')					选择带有href属性,并且属性值以.pdf结尾的所有<a>标签
			* 表示匹配的值可以出现在任意位置	$('a[href^="http"][href*="henry"]')		选择href属性以"http"开头并且存在"henry"字符串的<a>标签
			或									$(form input[type=text],[type=password])选择form下的type为text或password的所有input标签
[type="text"]或[type=text]均可
.....................................................................................................................................................
自定义选择符( : )	
自定义选择符并非浏览器原生的DOM选择符,性能较低
:eq(index)										$('tr:eq(1)')							指定选择元素
:even											$('tr:even')							选择所有tr中的奇数行
:odd											$('tr:odd')								偶数行				
												:nth-child(n|even|odd|formula)			唯一一个从1计数的选择符
:contains(text)			基于上下文内容的选择器	$("div:contains(text)")					选择<div>*text*</div>类型的所有元素,注意:会取最高的父div,test是否带引号均可
.....................................................................................................................................................
基于(form)表单的选择符
												:input									输入字段、文本区、选择列表和按钮元素
												:button									按钮元素或type属性值为button的输入元素
												:enabled								启用的表单元素
												:disabled								禁用的表单元素
												:checked								勾选的单选按钮或复选框
												:selected								选择的选项元素						
												$('input[type="radio"]:checked')		选择所有选中的单选按钮(而不是复选框)
												$('input[type="password"],input[type="text"]:disabled')	



======3.事 件=======================================================================================

页面加载事件:

	当文档完全下载到浏览器中时,会触发 window.onload 事件。这意味着页面上的全部元素 对JavaScript而言都是可以操作的,这种情况对编写功能性的代码非常有利,因为无需考虑加载的次序。
	jquery的$(function(){})和js的window.onload() 虽然这两个方法具有类似的效果,但是,它们在触发操作的时间上存在着微妙的差异,这种差异只有在加载的资源多到一定程度时才会体现出来。

	每次调用$(document).ready()方法 都会向内部的行为队列中添加一个新函数,当页面加载完成后,所有函数都会被执行。而且,这些函数会 按照注册它们的顺序依次执行

.....................................................................................................................................................
jQuery让渡$符:

	在某些情况下,可能有必要在同一个页面中使用多个JavaScript库。由于很多库都使用 $ 标识符(因为它简短方便),因此就需要一种方式来避免名称冲突,jQuery提供了一个 jQuery.noConflict() 方法,调用该方法可以把对 $ 标识符的控制权让渡还给其他库
<script src="prototype.js"></script>
<script src="jquery.js"></script>
<script>
	jQuery.noConflict();  //调用 .noConflict() 方法让出 $ .但是,在需要使用jQuery方法时,必须记住要用 jQuery而不是 $ 来调用
</script>
<script src="myscript.js"></script>

还有一个在 .ready() 方法中使用 $ 的技巧。我们传递给它的回调函数可以接收一个参数——jQuery对本身.利用这个参数,可以重新命名 jQuery 为 或其他字符,而不必担心造成冲突
jQuery(function($) {
	//使用$的代码
});

.....................................................................................................................................................

this:
上下文关键字 this 引用的是DOM元素,而不是jQuery对象
	
	当触发任何事件处理程序时,关键字 this 引用的都是携带相应行为的DOM元素。前面我们 谈到过, $() 函数可以将DOM元素作为参数,而 this 关键字是实现这个功能的关键。通过在事 件处理程序中使用 $(this) ,可以为相应的元素创建jQuery对象 

			$("#each").each(
				function(){
					$(this)....;
					return true;	
				}
			)

由于 $ 是JavaScript变量中合法的字符,因此可以利用它来提醒自己该变量中保存着一个jQuery对象 var $variable=$("div");
.....................................................................................................................................................
事件的过程:

	<div>
		<span>
			<a>test</a>
		</span>
	</div>

1.事件的捕获:
	允许多个元素响应单击事件的一种策略叫做事件捕获,
	当页面上发生一个事件时,每个层次上的DOM元素都有机会处理这个事件,如上,如果单击了页面中的链接元素,那么 <div> 、 <span> 和 <a> 全都应该得到响应这次单击的机会
	在事件捕获的过程中,事件首先会交给最外层的元素,接着再交给更具体的元素。在这个例子中,意味着单击事件首先会传递给<div> ,然后是 <span> ,最后是 <a>

2.事件冒泡:
	事件冒泡是一种与 事件捕获 相反的策略,
	即当事件发生时,会首先发送给最具体的元素,在这个元素获得响应机会之后,事件会向上冒泡到更一般的元素。	
	在上述案例中,<a> 会首先处理事件,然后按照顺序依次是 <span> 和 <div>
	
	事件冒泡可能会导致始料不及的行为,因此限制事件作用域很有必要性
	例如mouseover 或 mouseout 事件,而 mouseenter 和 mouseleave 事件可以避免这些冒泡问题

3.DOM 标准规定应该同时使用这两种策略:

### 首先,事件要从一般元素到具体元素逐层捕获,然后,事件再通过冒泡返回DOM树的顶层。而事件处理程序可以注册到这个过程中的任何一个阶段。
	
jQuery始终会在模型的冒泡阶段注册事件处理程序,我们总是可以假定最具体的元素会首先获得响应事件的机会。

4.事件对象:
	事件对象是一种DOM结构,它会在元素获得处理事件的机会时传递给被调用的事件处理程序。这个对象中包含着与事件有关的信息(例如事件发生 时的鼠标指针位置),也提供了可以用来影响事件在DOM中传递进程的一些方法.
	为了在处理程序中使用事件对象,需要为函数添加一个参数:
	$(document).ready(function() {
		$('#switcher').click(function(event) {			//在触发的事件函数中添加事件对象 
			$('#switcher button').toggleClass('hidden');
		});
	});

	事件对象的api:
	1.事件目标:
		event.target 属性保存着发生事件的目标元素,event.target == this
		通过 .target ,可以确定DOM中首先接收到事件的元素(即实际被单击的元素)
	2.停止事件传播:			
		.stopPropagation()				,事件只会被绑定的元素处理
	3.阻止默认操作:
		某些特殊的html标签附带着默认的事件,如<a>,<input type="submit">会出发submit事件,.preventDefault() 方法则可以在触发默认操作之前终止事件
		.preventDefault()				阻止默认操作	
	
	事件传播和默认操作是相互独立的两套机制,在二者任何一方发生时,都可以终止另一方。 如果想要同时停止事件传播和默认操作,可以在事件处理程序中返回 false ,这是对在事件对象 上同时调用 .stopPropagation() 和 .preventDefault() 的一种简写方式。

	4.事件命名空间
		让对 .off() 的调用更有针对性,以避免把注册的两个单击处理程序全都移除。达成目标的一种方式是使用事件命名空间,即在绑定事件时引入附加信息,以便将来识别特定的处理程序。
		要使用命名空间,需要退一步使用绑定事件处理程序的非简写方法,即 .on() 方法本身。
	$('#switcher').on('click.collapse', function(event) {	//使用命名空间'click.collapse'
		if (!$(event.target).is('button')) {
			$('#switcher button').toggleClass('hidden');
		}
	});
	$('#switcher-narrow, #switcher-large').click(function() {
		$('#switcher').off('click.collapse');				//只移除'click.collapse',而不会移除其它绑定在该对象上的click事件
	});	
		对于事件处理系统而言,后缀 .collapse是不可见的,但是,通过附加的命名空间信息,则可以解除对这个特定处理程序的绑定,同时不影响为按钮注册的其他单击处理程序。
		事件命名空间却是很有用的工具。在创建插件时使用这个工具会特别方便。


switch (this.id) {				//js中的switch语句可以传入字符串
	case 'switcher-large':
		num *= 1.4;
		break;
	case 'switcher-small':
		num /= 1.4;
		break;
	default:
		num = parseFloat(defaultSize);
}



















