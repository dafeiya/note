===5.面向对象的程序设计================================================================================================================

理解对象
	
	1.属性类型:
		ECMAScript 中有两种属性:数据属性 和 访问器属性。
*特性(attribute):
*	用于描述属性(property)的各种特征
*	特性是内部值,是为了实现 JavaScript 引擎用的,因此在 JavaScript 中不能直接访问它们
*	为了表示特性是内部值,该规范把它们放在了两对儿方括号中,例如 [[Enumerable]]

		1. 数据属性:
			数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有 4 个描述其行为的特性
			1.[[Configurable]]:(默认为true)
				表示能否通过 delete 删除属性从而重新定义属性,能否修改属性的特性,或者能否把属性修改为访问器属性。
				delete obj[prop]		//删除对象的指定属性
			2.[[Enumerable]] : (默认为true)
				表示能否通过 for-in 循环返回属性
			3.[[Writable]]: (默认为true)
				能否修改属性的值
			4.[[Value]] : (默认为undefined)
				包含这个属性的数据值

			为了操作数据属性的默认特性,ECMAScript 5提供了Object.defineProperty() 该方法接收三个参数:属性所在的对象、属性的名字和一个描述符对象。(描述符(descriptor)对象的属性必须是: configurable 、 enumerable 、 writable 和 value)
			var person = {};
			Object.defineProperty(person, "name", {
				configurable: false,			 //禁止删除name属性	
				writable: false,				 //禁止再修改person.name的值
				value: "Nicholas"				 //设置name的值
			});
			alert(person.name);					 //"Nicholas"
			将属性设为不可改之后,如果尝试为它指定新值,在非严格模式下,赋值操作将被忽略;在严格模式下,赋值操作将会导致抛出错误

		2. 访问器属性:
			访问器属性不包含数据值;它们包含一对儿 getter 和 setter 函数(非必需的)
			1.[[Configurable]] :
			2.[[Enumerable]]:
			3.[[Get]]:在读取属性时调用的函数。默认值为 undefined
			4.[[Set]]:在写入属性时调用的函数。默认值为 undefined 。

			访问器属性不能直接定义,必须使用 Object.defineProperty() 来定义
			var book = {
				_year: 2004,				//前面的下划线记号表示只能通过对象方法访问的属性
				edition: 1
			};
			Object.defineProperty(book, "year", {		//对book对象定义year访问器属性,同时为该访问器属性提供get/set方法
				get: function(){						//重写year属性的get方法
					return this._year;
				},
				set: function(newValue){				//重写year属性的set方法
					if (newValue > 2004) {
						this._year = newValue;
						this.edition += newValue - 2004;
					}
				}
			});
			book.year = 2005;
			alert(book.edition);		//2
			这是使用访问器属性的常见情形,即设置一个属性的值会导致其他属性发生变化
			在get/set方法出现前,使用__defineGetter__() 和 __defineSetter__()这两个非标准方法

			Object.defineProperties() 方法,一次定义多个属性,与defineProperty()的区别仅在于这里的属性都是在同一时间创建的。
			var book = {};
			Object.defineProperties(book, {
				_year: {
					value: 2004
				},
				edition: {
					value: 1
				},
				year: {
					get: function(){
						return this._year;
					}, 
					set: function(newValue){
						if (newValue > 2004) {
							this._year = newValue;
							this.edition += newValue - 2004;
						}
					} 
				}
			});

		3.定义和访问属性类型:
			1.定义属性的特性:			Object.defineProperty()
			2.定义多个属性和特性:		Object.defineProperties()
			3.读取属性的特性:			Object.getOwnPropertyDescriptor()	

			var book = {};
			Object.defineProperties(book, {
				_year: {
					value: 2004
				},
				edition: {
					value: 1
				},
				year: {
					get: function(){
						return this._year;
					},
					set: function(newValue){
						if (newValue > 2004) {
							this._year = newValue;
							this.edition += newValue - 2004;
						}
					}
				}
			});
			var descriptor = Object.getOwnPropertyDescriptor(book, "_year");
			alert(descriptor.value);										//2004
			alert(descriptor.configurable);									//false
			alert(typeof descriptor.get);									//"undefined"
			var descriptor = Object.getOwnPropertyDescriptor(book, "year");
			alert(descriptor.value);										//undefined
			alert(descriptor.enumerable);									//false
			alert(typeof descriptor.get);									//"function"

-------------------------------------------------------------------------------
	2.创建对象:
		1.工厂模式 创建对象
			一种简单的创建对象的方式
		function createPerson(name, age, job){
			var o = new Object();				
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName = function(){
				alert(this.name);
			};
			return o;
		}
		var person1 = createPerson("Nicholas", 29, "Software Engineer");
		var person2 = createPerson("Greg", 27, "Doctor");

		工厂模式的问题:
			工厂模式虽然解决了创建多个相似对象的问题,但却没有解决对象识别的问题(即怎样知道一个对象的类型)

		2.构造函数模式 创建对象

		function Person(name, age, job){
			this.name = name;
			this.age = age;
			this.job = job;
			this.sayName = function(){
				alert(this.name);
			};
		}
		var person1 = new Person("Nicholas", 29, "Software Engineer");
		var person2 = new Person("Greg", 27, "Doctor");
		注意 Person() 中的代码除了与 createPerson() 中相同的部分外,还存在以下不同之处:	
			1. 没有显式地创建对象;
			2. 直接将属性和方法赋给了 this 对象;
			3. 没有 return 语句。
			4. 按照惯例,构造函数始终都应该以一个大写字母开头	
		要创建 Person 的新实例,必须使用 new 操作符,以这种方式调用构造函数实际上会经历以下 4个步骤:
			(1) 创建一个新对象;
			(2) 将构造函数的作用域赋给新对象(因此 this 就指向了这个新对象)
			(3) 执行构造函数中的代码(为这个新对象添加属性);
			(4) 返回新对象。
		构造函数与其他函数的唯一区别,就在于调用它们的方式不同(是否使用new关键字)
			任何函数,只要通过 new 操作符来调用,那它就可以作为构造函数;
			而任何函数,如果不通过 new 操作符来调用,那它跟普通函数也不会有什么两样
			// Person()作为普通函数调用
			Person("Greg", 27, "Doctor"); // 添加到 window
			window.sayName(); //"Greg"
			this.name		  //"Greg"

			// Person()在另一个对象的作用域中调用
			var o = new Object();
			Person.call(o, "Kristen", 25, "Nurse");
			o.sayName(); //"Kristen"

			构造函数的问题:
			使用构造函数的主要问题,就是每个方法都要在每个实例上重新创建一遍。即不同实例上的同名函数是重复定义的,造成资源浪费


-------------------------------------------------------------------------------
	3.原型模式

		我们创建的每个Function函数都有一个 prototype (原型)属性,这个属性是一个指针,指向一个对象,而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解,那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说,不必在构造函数中定义对象实例的信息,而是可以将这些信息直接添加到原型对象中


		function Person(){							//定义一个空构造函数
		}
		Person.prototype.name = "Nicholas";			//将对象的属性和方法定义到函数的原型属性上
		Person.prototype.age = 29;
		Person.prototype.job = "Software Engineer";
		Person.prototype.sayName = function(){
			alert(this.name);
		};
		var person1 = new Person();
		person1.sayName();							//"Nicholas"
		var person2 = new Person();
		person2.sayName();							//"Nicholas"
		alert(person1.sayName == person2.sayName);  //true

		原型模式的重要性不仅体现在创建自定义类型方面,就连所有原生的引用类型,都是采用这种模式创建的。所有原生引用类型( Object 、 Array 、 String ,等等)都在其构造函数的原型上定义了方法。例 如 , 在 Array.prototype 中 可 以 找 到 sort() 方 法 , 而 在 String.prototype 中 可 以 找 到substring() 方法

		原型对象的问题:
		省略了为构造函数传递初始化参数这一环节,结果所有实例在默认情况下都将取得相同的属性值。原型中所有属性是被很多实例共享的,这种共享对于函数非常合适。对于那些包含基本值的属性倒也说得过去,毕竟(如前面的例子所示),通过在实例上添加一个同名属性,可以隐藏原型中的对应属性。然而,对于包含引用类型值的属性来说,问题就比较突出了。

		function Person(){
		}
		Person.prototype = {
			constructor: Person,
			name : "Nicholas",
			friends : ["Shelby", "Court"],
		};
		var person1 = new Person();
		var person2 = new Person();
		person1.friends.push("Van");		//只修改person1的friends属性
		alert(person1.friends);				//"Shelby,Court,Van"
		alert(person2.friends);				//"Shelby,Court,Van"
		alert(person1.friends === person2.friends); //true

		修改引用类型的属性时,由于原型对象中存放的都是同一个引用地址,因此所有的对象实例中的引用属性都被修改掉

-----------------------------------------------------------------------------------
	4.构造函数模式+原型模式

		这种构造函数与原型混成的模式,是目前在 ECMAScript 中使用最广泛、认同度最高的一种创建自定义类型的方法。可以说,这是用来定义引用类型的一种默认模式。
	
	function Person(name, age, job){			//构造函数中定义基本类型的属性和引用类型的属性
		this.name = name;
		this.age = age;
		this.job = job;
		this.friends = ["Shelby", "Court"];		//引用类型的属性
	}
	Person.prototype = {						//使用对象字面量的方式定义原型对象(简洁)
		constructor : Person,					//对象字面量定义原型对象时需要将constructor属性指回到函数上
		sayName : function(){					//原型模式中定义函数
			alert(this.name);
		}
	}
	var person1 = new Person("Nicholas", 29, "Software Engineer");
	var person2 = new Person("Greg", 27, "Doctor");
	person1.friends.push("Van");
	alert(person1.friends);						 //"Shelby,Count,Van"
	alert(person2.friends);						 //"Shelby,Count"
	alert(person1.friends === person2.friends);	 //false
	alert(person1.sayName === person2.sayName);  //true

		问题:
			无法通过一个函数来完成构造对象的定义
-----------------------------------------------------------------------------------
	5.动态原型模式
		将原型方法的定义内置在构造函数中,通过检查某个应该存在的方法是否有效,来决定是否需要初始化原型
		定义函数时不必用一大堆if 语句检查每个属性和每个方法;只要检查其中一个即可。
		function Person(name, age, job){
										//定义属性
			this.name = name;
			this.age = age;
			this.job = job;
										//定义原型方法
			if (typeof this.sayName != "function"){		//sayName不存在的时候就定义该方法
				Person.prototype.sayName = function(){
					alert(this.name);
				};
			}
		}

		var friend = new Person("Nicholas", 29, "Software Engineer");
		friend.sayName();

*	使用动态原型模式时,不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型,那么就会切断现有实例与新原型之间的联系。


-----------------------------------------------------------------------------------
	6.寄生构造函数模式
		通常,在前述的几种模式都不适用的情况下,可以使用寄生(parasitic)构造函数模式。这种模式的基本思想是创建一个函数,该函数的作用仅仅是封装创建对象的代码,然后再返回新创建的对象
		除了使用 new 操作符并把使用的包装函数叫做构造函数之外,这个模式跟工厂模式其实是一模一样的。
		function Person(name, age, job){
			var o = new Object();
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName = function(){
				alert(this.name);
			};
			return o;
		}
		var friend = new Person("Nicholas", 29, "Software Engineer");
		friend.sayName();								//"Nicholas"

		假设我们想创建一个具有额外方法的特殊数组。由于不能直接修改 Array 构造函数,因此可以使用这个模式。
		function SpecialArray(){
			var values = new Array();			  //创建数组
			values.push.apply(values, arguments); //添加值
			values.toPipedString = function(){	  //添加方法
				return this.join("|");
			};
			return values;						  //返回数组
		}
		
		注意:
			寄生构造函数模式中构造函数返回的对象与在构造函数外部创建的对象没有什么不同。为此,不能依赖 instanceof 操作符来确定对象类型。由于存在上述问题,我们建议在可以使用其他模式的情况下,不要使用这种模式。


-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

继承:
	继承是 OO 语言中的一个最为人津津乐道的概念。许多 OO 语言都支持两种继承方式:接口继承和实现继承。接口继承只继承方法签名,而实现继承则继承实际的方法。		
	由于javascript的函数没有签名,在 ECMAScript 中无法实现接口继承。 ECMAScript 只支持实现继承,而且其实现继承主要是依靠原型链来实现的。

*构造函数、原型和实例的关系:
*	每个构造函数都有一个原型对象(prototype),原型对象都包含一个指向构造函数的指针(constructor),而实例都包含一个指向原型对象的内部指针(__proto__)。
*
**js中方法是对象,构造函数是对象,构造函数的原型是对象
**对象:
*	任何对象都具有属性__proto__,对象的__proto__属性指向创建该对象的构造函数的原型对象，这保证了对象的实例能够访问到构造函数的原型对象中定义的属性和方法。
**Function:
*	方法(Function)是种特殊的对象,除了有__proto__属性外,还有自己特有的属性—原型属性（prototype），prototype属性指向该方法的原型对象。
**原型对象:
*	原型对象也有一个独特的属性，叫做constructor，这个属性包含了一个指针，指回原构造函数

	1.原型链
		原型链是实现继承的主要方法,其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。
		function Father(){			//父构造函数			
				this.name='father';
				this.father='father';

		}
		Father.prototype.getName=function(){
				return 'father:'+this.name;
		}

		function Son(){				//子构造函数
				this.name='son';
				this.son='son';

		}
		Son.prototype=new Father();		//子构造函数的原型指向父构造函数
		Son.prototype.getName=function(){	//给原型添加方法的代码一定要放在替换原型的语句之后
				return 'son:'+this.name
		}
		var instance=new Son();			

		instance.name					//son (子构造函数中的属性重写了父构造函数中的同名属性)
		instance.son					//son
		instance.father					//father (拥有了父构造函数中的属性)
		instance.getName()				//son:son (子构造函数重写了父构造函数)
		Son.prototype.constructor		
										//ƒ Father(){
										//		this.father='father';
										//		this.name='father';
										//}
		instance.__proto__.constructor
										//ƒ Father(){					
										//		this.name='father';
										//  	this.father='father';
									    //}

		通过实现原型链,本质上扩展了原型搜索机制。
		当以读取模式访问一个实例属性时,首先会在实例中搜索该属性。如果没有找到该属性,则会继续搜索实例的原型。在通过原型链实现继承的情况下,搜索过程就得以沿着原型链继续向上。
		instance.getName() 会经历三个搜索步骤:
			1)搜索实例;
			2)搜索 Son.prototype ; 
			3)搜索 Father.prototype,最后一步才会找到该方法。在找不到属性或方法的情况下,搜索过程总是要一环一环地前行到原型链末端才会停下来。
		要记住,所有函数的默认原型都是 Object 的实例,因此默认原这也正是所有自定义类型都会继承 toString() 、型都会包含一个内部指针,指向 Object.prototype 。valueOf() 等默认方法的根本原因。
*	注意:
		1.子类型有时候需要重写超类型中的某个方法,或者需要添加超类型中不存在的某个方法。但不管怎样,给原型添加方法的代码一定要放在替换原型的语句之后。
		2.在通过原型链实现继承时,不能使用对象字面量创建原型方法。因为这样做就会重写原型链

	原型链的问题:
		1.
		2.在创建子类型的实例时,不能向超类型的构造函数中传递参数。实际上,应该说是没有办法在不影响所有对象实例的情况下,给超类型的构造函数传递参数。	

	2. 确定原型和实例的关系:
		1.使用instanceof关键字判断
			instance instanceof Son		//true
			instance instanceof Father	//true
			instance instanceof Object	//true
		2.使用原型对象中的 isPrototypeOf() 方法
			Father.prototype.isPrototypeOf(instance)	// true
			Son.prototype.isPrototypeOf(instance)		// true
			Object.prototype.isPrototypeOf(instance)	// true














