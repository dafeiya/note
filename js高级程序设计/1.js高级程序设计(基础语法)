
===1.简介=====================================================================================================

一个完整的 JavaScript 实现应该由下列三个不同的部分组成:
	1.核心(ECMAScript)
	2.文档对象模型(DOM)
	3.浏览器对象模型(BOM)

*宿主环境:
	js宿主环境不仅提供基本的ECMAScript 实现,同时也会提供该语言的扩展,以便语言与环境之间对接交互,如DOM等,我们常见的Web 浏览器只是ECMAScript实现可能的宿主环境之一,其他宿主环境包括 Node和 Adobe Flash

1.ECMAScript:
	由 ECMA-262 定义的ECMAScript 与 Web 浏览器没有依赖关系,ECMA-262 定义的只是这门语言的基础,而在此基础之上可以构建更完善的脚本语言

2.文档对象模型(DOM):
	文档对象模型(DOM,Document Object Model)是针对 XML 但经过扩展用于 HTML 的应用程序编程接口,DOM 把整个页面映射为一个多层节点结构。HTML或 XML 页面中的每个组成部分都是某种类型的节点

*DOM级别:
	DOM1 级(DOM Level 1)目标主要是映射文档的结构,于1998年成为W3C的推荐标准。
		DOM1 级由两个模块组成:DOM核心(DOM Core)和 DOM HTML。其中,DOM Core规定的是如何映射基于XML的文档结构,以便简化对文档中任意部分的访问和操作。DOM HTML 模块则在 DOM 核心的基础上加以扩展,添加了针对HTML的对象和方法
	DOM2 级扩充了鼠标和用户界面事件、范围、遍历(迭代 DOM文档的方法)等细分模块,增加了对 CSS的支持
	DOM3 级则进一步扩展了 DOM,引入了以统一方式加载和保存文档的方法

	注意, DOM 并不只是针对 JavaScript 的,很多别的语言也都实现了 DOM。不过,在 Web 浏览器中,基于 ECMAScript 实现的 DOM 的确已经成为 JavaScript 这门语言的一个重要组成部分
	
3.浏览器对象模型(BOM):
	可以访问和操作浏览器窗口的浏览器对象模型(BOM,Browser Object Model)。
	开发人员使用 BOM 可以控制浏览器显示的页面以外的部分,但BOM也是经常会导致问题的地方,它作为 JavaScript 实现的一部分但却没有相关的标准。
	常用对象如:
		1. 弹出新浏览器窗口的功能;
		2. 移动、缩放和关闭浏览器窗口的功能;
		3. 提供浏览器详细信息的 navigator 对象;
		4. 提供浏览器所加载页面的详细信息的 location 对象;
		5. 提供用户显示器分辨率详细信息的 screen 对象;
		6. 对 cookies 的支持;
		7. 像 XMLHttpRequest 和 IE 的 ActiveXObject 这样的自定义对象。
	
	由于没有 BOM 标准可以遵循,BOM对象模型由不同的浏览器厂商各自实现,而HTML5 发布后,很多关于 BOM 的困惑烟消云散


===2.基础=====================================================================================================

<script>标签:
	异步脚本--async :可选属性。表示应该立即下载脚本,并异步执行脚本中的内容,常用于下载其他资源或等待加载其他脚本。只对外部脚本文件有效。
	延迟脚本--defer :可选属性。表示脚本延迟到文档完全被解析和显示之后再执行,相当于告诉浏览器立即下载,但延迟执行。只对外部脚本文件有效
	<script type="text/javascript" defer="defer" src="example1.js"></script>

	无论如何包含代码,只要不存在 defer 和 async 属性,浏览器都会按照 <script> 元素在页面中出现的先后顺序对它们依次进行解析。换句话说,在第一个 <script> 元素包含的代码解析完成后,第二个 <script> 包含的代码才会被解析,然后才是第三个、第四个......  

	浏览器在遇到 <body> 标签时才开始呈现内容,而<head> 元素中包含所有 JavaScript 文件,必须等到全部JavaScript代码都被下载、解析和执行完成以后,才能开始呈现页面的内容,因此web开发中将js引用放到<body>后面会提升页面的打开速度

-------------------------------------------------------------------------
*严格模式 "use strict";
	ECMAScript 5 引入了严格模式(strict mode)的概念。ECMAScript 3 中的一些不确定的行为将得到处理,而且对某些不安全的操作也会抛出错误。在整个脚本中启用严格模式,可以在顶部添加如下代码(编译指示): "use strict";

	
	var message;//像这样未经过初始化的。会保存一个特殊的值-- undefined,表示这个值未定义

	var message = "hi";
	message = 100; // 有效,但不推荐.不建议修改变量所保存值的类型,但这种操作在 ECMAScript 中完全有效。

	在任何地方省略 var 操作符,都会创建一个全局变量:


------------------------------------------------------------------------

js操作符

typeof:			
	检测给定变量的数据类型,对一个值使用,被操作数可以是变量( message ),也可以是数值字面量。注意, typeof 是一个操作符而不是函数,因此例子中的圆括号尽管可以使用,但不是必需的
	typeof 操作符可能返回下列某个字符串:
		"undefined"  ——如果这个值未定(未初始化和未声明的变量);
		"boolean"	 ——如果这个值是布尔值;
		"string"	 ——如果这个值是字符串;
		"number"	 ——如果这个值是数值;
		"object"	 ——如果这个值是对象或 null ;
		"function"   ——如果这个值是函数。

	对于尚未声明过的变量,只能执行一项操作,即使用 typeof 操作符检测其数据类型
-------------------------------------------------------------------------	
*js的数据类型:

1.ECMAScript 中有 5 种简单数据类型(也称为基本数据类型):
	Undefined 、 Null 、 Boolean 、 Number和 String
2.还有 1 种复杂数据类型— Object,其本质上是由一组无序的名值对组成的	

	1.undefined类型:
		Undefined 类型只有一个值,即特殊的 undefined 。
		在使用 var 声明变量但未对其加以初始化时,这个变量的值就是 undefined,引入这个值是为了正式区分空对象指针与未经初始化的变量。
		var message;	 alert(message == undefined); //true
		var message = undefined;	 alert(message == undefined); //true

	2.Null 类型:
		Null 类型是第二个只有一个值的数据类型,这个特殊值是 null
		从逻辑角度来看, null 值表示一个空对象指针,而这也正是使用 typeof 操作符检测 null 值时会返回 "object" 的原因
		var = null;		alert(typeof car); // "object"
		如果定义的变量准备在将来用于保存对象,那么最好将该变量初始化为 null 而不是其他值。这样一来,只要直接检查 null 值就可以知道相应的变量是否已经保存了一个对象的引用

		实际上, undefined 值是派生自 null 值的,因此 ECMA-262 规定对它们的相等性测试要返回 true :
		alert(null == undefined); //true

undefined和null的区别:
	位于 null 和 undefined的用途完全不同,无论在什么情况下都没有必要把一个变量的值显式地设置为 undefined,可是同样的规则对 null 却不适用,只要意在保存对象的变量还没有真正保存对象,就应该明确地让该变量保存 null 值.

	3.Boolean 类型:
		Boolean类型只有两个字面值: true 和 false(区分大小写)。虽然 Boolean 类型的字面值只有两个,但 ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值.
		Boolean():可以对任何数据类型的值调用 Boolean() 函数,而且总会返回一个 Boolean 值,而控制语句(如 if 语句)会自动执行相应的 Boolean()
		由于控制语句中存在这种自动执行的 Boolean 转换,因此确切地知道在流控制语句中使用的是什么变量至关重要。错误地使用一个对象而不是一个 Boolean 值,就有可能彻底改变应用程序的流程。

#Boolean()函数转换表:
	数据类型				转换为true的值				转换为false的值
	Boolean						true						false
	String					任何非空字符串					"" (空字符串)
	Number					任何非零数字值(包括无穷大)		0 和 NaN
	Object					任何对象						null
	Undefined				无								undefined

	4.Number 类型:
		支持十进制(默认),八进制,十六进制;支持整数和浮点数值字面量
		在进行算术计算时,所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。
		八进制(0~7):
			第一位必须是零(0) ,然后是八进制数字序列(0~7),如果字面值中的数值超出了范围,那么前导零将被忽略,后面的数值将被当作十进制数值解析
		十六进制(0~9 及 A~F):
			前两位必须是 0x,后跟任何十六进制数字
		十进制:
			1. 浮点数值:
				包含一个小数点,并且小数点后面必须至少有一位数字.
				由于保存浮点数值需要的内存空间是保存整数值的两倍,因此 ECMAScript 会不失时机地将浮点数值转换为整数值。
				浮点数值的最高精度是 17 位小数,但在进行算术计算时其精确度远远不如整数(二进制问题)。(永远不要测试某个特定的浮点数值。)
			2.数值范围:
				Number.MIN_VALUE ~ Number.MAX_VALUE,超出范围则被转化为Infinity(正无穷)/-Infinity(负无穷),
				Infinity 不能够参与计算, 因此需要isFinite() 函数校验数值是否在js范围内
			3. NaN:(Not a Number)
				这个数值用于表示一个本来要返回数值的操作数但并未返回数值的情况(这样就避免抛出错误了)
				在ECMAScript 中,任何数值除以 0 会返回 NaN ,因此不会影响其他代码的执行

			*NaN本身有两个非同寻常的特点:
			*	1.任何涉及 NaN 的操作(例如 NaN /10)都会返回 NaN
			*	2.NaN 与任何值都不相等,包括 NaN 本身	NaN == NaN;	//false
			*
			*isNaN() 函数:
			*	该函数会尝试将参数值转换为数值,若不能被转换为数值的值则返回 true
			*	注意:isNaN(true);	//false(可以被转换成数值 1)				
			
			4. 数值转换:
				有 3 个函数可以把非数值转换为数值: Number() 、 parseInt() 和 parseFloat()	
				Number()可以用于把任何数据类型尝试转化为数字,		//具体转换规则细查
				parseInt()  专门用于把字符串转化为整数
				parseFloat()则专门用于把字符串转换成浮点数
				
				parseInt("1234blue");	//1234	
				parseInt("");			//NaN
				parseInt(22.5);			//22
				parseInt("AF", 16);		//175		可以接收第二个参数,指定进度值

	5.String 类型:
		在很多语言中,字符串以对象的形式来表示,因此被认为是引用类型的。ECMAScript 放弃了这一传统
		String 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列,即字符串。字符串可以由双引号(")或单引号(')表示
		ECMAScript 中的字符串是不可变的,也就是说,字符串一旦创建,它们的值就不能改变。要改变某个变量保存的字符串,首先要销毁原来的字符串,然后再用另一个包含新值的字符串填充该变量
		1.转换为字符串:
			有两种方式,
			(1):使用几乎每个值都有的 toString() 方法(除了undefined和null之外的所有数据类型都有该方法)
			默认情况下, toString() 方法以十进制格式返回数值的字符串表示,但该方法支持传入进制数,输出以二进制、八进制、十六进制,乃至其他任意有效进制格式表示的字符串值,
			var num = 10;
			num.toString();			//"10"
			num.toString(2);		//"1010"
			num.toString(16);		//"a"
			(2):与 "" 相加

		*String() 转型函数
		*	如果值有 toString() 方法,则调用该方法(没有参数)并返回相应的结果
		*	如果是null ,则返回"null";如果是undefined,则返回"undefined"

	6.Object 类型:
		在 ECMAScript 中, (类似 Java 中的 java.lang.Object 对象一样) Object 类型是所有它的实例的基础,也就是说Object 类型所具有的任何属性和方法也同样存在于更具体的对象中
		ECMA-262 不负责定义宿主对象,因此宿主对象可能会也可能不会继承 Object,比如 BOM 和 DOM 中的对象.
		1.Object属性和方法:
		由于在 ECMAScript 中 Object 是所有对象的基础,因此所有对象都具有这些基本的属性和方法。
			1. constructor :保存着用于创建当前对象的函数。对于前面的例子而言,构造函数(constructor)就是 Object() 。
			2. hasOwnProperty(propertyName) :用于检查给定的属性在当前对象实例中(而不是在实例的原型中)是否存在。其中,作为参数的属性名( propertyName )必须以字符串形式指定
				(例如: o.hasOwnProperty("name") )
			3. isPrototypeOf(object) :用于检查传入的对象是否是传入对象的原型
			4. propertyIsEnumerable(propertyName) :用于检查给定的属性是否能够使用 for-in 语句来枚举。与 hasOwnProperty() 方法一样,作为参数的属性名必须以字符串形式指定。
			5. toLocaleString() :返回对象的字符串表示,该字符串与执行环境的地区对应。
			6. toString() :返回对象的字符串表示。
			7. valueOf() :返回对象的字符串、数值或布尔值表示。通常与 toString() 方法的返回值相同。		

----------------------------------------------------------------------------------

操作符:
	1. 递增和递减操作符
		--Number:
			var a= 29;
			var b= --a + 2;
			alert(a);				//28
			alert(b);				//30
		Number--:
			var a=10;
			var b=5;
			var c= a-- +b			//15
			var d=a+b				//14
	
	2.位操作符:
	在 ECMAScript 中,当对数值应用位操作符时,后台会发生如下转换过程:64 位的数值被转换成 32位数值,然后执行位操作,最后再将 32 位的结果转换回 64 位数值。这样,表面上看起来就好像是在操作 32 位数值,就跟在其他语言中以类似方式执行二进制操作一样。但这个转换过程也导致了一个严重的副效应,即在对特殊的 NaN 和 Infinity 值应用位操作时,这两个值都会被当成 0 来处理。如果对非数值应用位操作符,会先使用 Number() 函数将该值转换为一个数值(自动完成),然后再应用位操作。得到的结果将是一个数值。
		1. 按位非(NOT)			( ~ )		返回数值的反码
		2. 按位与(AND)			( & )		1 & 1 返回1,其余为0
		3. 按位或(OR)			( | )		0 | 0 返回0,其余为1
		4. 按位异或(XOR)		( ^ )		同则1,不同则0
		5. 左移					( << )		左移不会影响操作数的符号位
		6. 右移					( >> )		保留符号位
			var oldValue = 64; // 等于二进制的 1000000
			var newValue = oldValue >> 5; // 等于二进制的 10 ,即十进制的 2
		7. 无符号右移			( >>> )		不保留符号位

	3.布尔操作符:
		1. 逻辑非				( ! )		先将它的操作数转换为一个布尔值,然后再对其求反		
			同时使用两个逻辑非操作符,实际上就会模拟 Boolean() 转型函数的行为,即 !! 等同于Boolean()
		2. 逻辑与				( && )	
		3. 逻辑或				( || )

	4.相等操作符:
		1.是否相等				( == )
		2.是否不相等			( != )
		注意:这两个操作符都会先尝试转换操作数(通常称为强制转型) ,然后再比较它们的相等性。

*转换规则:
*	1.如果有一个操作数是布尔值,则转换为数值
*	2.数字与字符串比较,则转为数字
*	3.对象与非对象比较,则调用对象的valueof(),用得到的基本类型值按照前面的规则进行比较;
*	4.null 和 undefined 是相等的。并且都不能转换成其他任何值

		表 达 式						值
		null == undefined				true
		"NaN" == NaN					false
		5 == NaN						false
		NaN == NaN						false
		NaN != NaN						true
		false == 0						true
		true == 1						true
		true == 2						false
		undefined == 0					false	
		null == 0						false
		"5"==5							true

		3.全等				  ( === )		操作数未经转换就相等的情况下返回 true,否则为false
		4.不全等			  ( !== )

------------------------------------------------------------------------------

语句

	1.for-in 语句
		for-in 语句是一种精准的迭代语句,可以用来枚举对象的属性。
			ECMAScript 对象的属性没有顺序。因此,通过 for-in 循环输出的属性名的顺序是不可预测的。

			for (var propName in window) {		//用 for-in 循环来显示了 BOM 中 window 对象的所有属性
				console.log(propName);
			}

---------------------------------------------------------------------------

理解参数

	1.arguments对象:
	ECMAScript 函数的参数与大多数其他语言中函数的参数有所不同。ECMAScript 函数不介意传递进来多少个参数,也不在乎传进来参数是什么数据类型。
	ECMAScript 中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组,而不关心数组中包含哪些参数(如果有参数的话)。如果这个数组中不包含任何元素,无所谓;如果包含多个元素,也没有问题。	
	函数体内可以通过 arguments 对象来访问这个参数数组,从而获取传递给函数的每一个参数
	注意:arguments 对象只是与数组类似(它并不是 Array 的实例),因为可以使用方括号语法访问它的每一个元素(即第一个元素是 arguments[0] ,第二个元素是 argumetns[1] ,以此类推),使用 length 属性来确定传递进来多少个参数。arguments 对象的长度是由传入的参数个数决定的,不是由定义函数时的命名参数的个数决定的。
	function sayHi() {
		alert("Hello " + arguments[0] + "," + arguments[1]);
	}

*	ECMAScript 中的所有参数传递的都是值,不可能通过引用传递参数。
*	var a=10;
*	var b=a;
*	++a;
*	alert(b);		// 10

	2.ECMAScript没有重载
	由于ECMAScirpt函数没有签名,因为其参数是由包含零或多个值的数组来表示的。而没有函数签名,真正的重载是不可能做到的。
	如果在 ECMAScript 中定义了两个名字相同的函数,则该名字只属于后定义的函数,其后的同名函数会覆盖前面的函数,而与传入的参数个数无关。

===3.变量、作用域和内存问题================================================================================================================

基本类型和引用类型的值
		
	1.ECMAScript 变量可能包含两种不同数据类型的值:基本类型值和引用类型值

		1. 基本类型值指的是简单的数据段,基本数据类型是按值访问的,因为可以操作保存在变量中的实际的值。即变量拷贝后两个变量可以参与任何操作而不会相互影响。

		2. 引用类型值指那些可能由多个值构成的对象,引用类型的值是按引用访问的,JavaScript 不允许直接访问内存中的位置,也就是说不能直接操作对象的内存空间。在操作对象时,实际上是在操作对象的引用而不是实际的对象。(注:当复制保存着对象的某个变量时,操作的是对象的引用。但在为对象添加属性时,操作的是实际的对象。) 

	2.动态的属性
	引用类型的值的属性是可以动态增删的.
	对于引用类型的值,我们可以为其添加属性和方法,也可以改变和删除其属性和方法,但给基本类型的值添加属性是无效的(添加属性在语法上通过,但没有效果).	

	3.传递参数
	ECMAScript 中所有函数的参数都是按值传递的,参数只能按值传递,但基本类型的值传递和引用类型的值传递有些不同
		1.基本类型的值传递:
			在向参数传递引用类型的值时,会把这个值在内存中的地址复制给一个局部变量,因此这个局部变量的变化会反映在函数的外部,从而而与被复制的变量无关
			function addTen(num) {
				num += 10;
				return num;
			}
			var count = 20;
			var result = addTen(count);
			alert(count);				//20,没有变化
			alert(result);				//30
		2.引用类型的值传递:
			引用类型的值传递是把变量中引用的地址作为参数进行传递, 传递后可以通过这个引用的地址对原对象进行操作,但不能修改这个引用的地址
			function setName(obj) {
				obj.name = "Nicholas";
				obj = new Object();		//对引用地址的修改是无效的
				obj.name = "Greg";
			}
			var person = new Object();
			setName(person);
			alert(person.name);			 //"Nicholas"  

	4.检测类型
	instanceof 操作符	result = variable instanceof constructor
	虽然在检测基本数据类型时 typeof 是非常得力的助手,但在检测引用类型的值时,这个操作符的用处不大。因此出现了instanceof
	根据规定,所有引用类型的值都是 Object 的实例,如果使用 instanceof 操作符检测基本类型的值,则该操作符始终会返回 false ,因为基本类型不是对象。
-----------------------------------------------------------------------------------
执行环境及作用域

	1.执行环境(execution context)
	执行环境定义了变量或函数有权访问的其他数据。每个执行环境都有一个与之关联的变量对象(variable object),环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象,但解析器在处理数据时会在后台使用它。

	全局执行环境:
	全局执行环境是最外围的一个执行环境,根据 ECMAScript 实现所在的宿主环境不同,表示执行环境的对象也不一样。
	在 Web 浏览器中,全局执行环境被认为是 window 对象,因此所有全局变量和函数都是作为 window 对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后,该环境被销毁,保存在其中的所有变量和函数定义也随之销毁(全局执行环境直到应用程序退出——例如关闭网页或浏览时才会被销)

	每个函数都有自己的执行环境。当执行流进入一个函数时,函数的环境就会被推入一个环境栈中。而在函数执行之后,栈将其环境弹出,把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正是由这个方便的机制控制着。
	函数参数也被当作变量来对待,因此其访问规则与执行环境中的其他变量相同
	var color = "blue";
	function changeColor(){
		var anotherColor = "red";
		function swapColors(){
			var tempColor = anotherColor;
			anotherColor = color;
			color = tempColor;
			// 这里可以访问 color、anotherColor 和 tempColor
		}
		// 这里可以访问 color 和 anotherColor,但不能访问 tempColor
		swapColors();
	}
	// 这里只能访问 color
	changeColor();

	当在某个环境中为了读取或写入而引用一个标识符时,必须通过搜索来确定该标识符实际代表什么。搜索过程从作用域链的前端开始,向上逐级查询与给定名字匹配的标识符。如果在局部环境中找到 3了该标识符,搜索过程停止,变量就绪。如果在局部环境中没有找到该变量名,则继续沿作用域链向上搜索。搜索过程将一直追溯到全局环境的变量对象。如果在全局环境中也没有找到这个标识符,则意味着该变量尚未声明。

	2.JavaScript 没有块级作用域
	如果是在 C、C++或 Java 中, color 会在 if 语句执行完毕后被销毁。但在 JavaScript 中, if或for 语句中的变量声明会将变量添加到当前的执行环境(在这里是全局环境)中。
		if (true) {
			var color = "blue";
		}
		alert(color);
		//"blue"

		for (var i=0; i < 10; i++){
			doSomething(i);
		}
		alert(i);
		//10

-----------------------------------------------------------------------------------
	3.垃圾收集
		1.标记清除
		2.引用计数


===4.面向对象的程序设计================================================================================================================

1.Object 类型
	Object 是ECMAScript 中使用最多的一个类型。虽然 Object 的实例不具备多少功能,但对于在应用程序中存储和传输数据而言,它们确实是非常理想的选择
	1.创建 Object 实例的方式有两种。
		1.使用 new 操作符后跟 Object 构造函数:
			var person = new Object();
			person.name = "Nicholas";
			person.age = 29;
		2.使用对象字面量表示法:
			var person = {
				name : "Nicholas",
				age : 29
			};
		在使用对象字面量语法时,属性名也可以使用字符串(数值属性名会自动转换为字符串)
			var person = {
				"name" : "Nicholas",
				"age" : 29,
				5 : true
			};
		另外,使用对象字面量语法时,如果留空其花括号,则可以定义只包含默认属性和方法的对象
			var person = {};		 //与 new Object()相同
			person.name = "Nicholas";
			person.age = 29;
	2.对象的访问:
		alert(person.name);
		alert(person["name"]);	//如果属性名中包含会导致语法错误的字符,或者属性名使用的是关键字或保留字,也可以使用方括号表示法。
------------------------------------------------------------------------

2.Function 类型
	函数实际上是对象。
	每个函数都是 Function 类型的实例,而且都与其他引用类型一样具有属性和方法。由于函数是对象,因此函数名实际上也是一个指向函数对象的指针,不会与某个函数绑定
	1.创建Function对象(函数声明):
		1.使用函数声明语法定义:(声明提前)
			function sum (num1, num2) {
				return num1 + num2;
			}
		2.使用函数表达式定义函数:(无声明提前,此方式为匿名函数声明)  (function之后不带函数名的均为匿名函数)
			除了什么时候可以通过变量访问函数这一点区别之外,函数声明与函数表达式的语法其实是等价的。
			因为函数名为引用该函数的指针,因此函数没有重载,相同函数名,后一个覆盖前一个
			函数的名字仅仅是一个包含指针的变量而已
			var sum = function(num1, num2){
				return num1 + num2;
			};
		3.使用 Function 构造函数:(不推荐)
			var sum = new Function("num1", "num2", "return num1 + num2"); // 不推荐
		4.也可以同时使用函数声明和函数表达式:(不推荐)
			var sum = function sum(){}		//部分浏览器不支持该方式

	2.作为值的函数:
		因为 ECMAScript 中的函数名本身就是变量,所以函数也可以作为值来使用
		因此.不仅可以像传递参数一样把一个函数传递给另一个函数,而且可以将一个函数作为另一个函数的结果返回
			function addNums(num1,num2){
					return num1+num2;
			}
			function addFun(num1,num2){
					return addNums(num1,num2);
			}
			addFun(1,2)			// 3

	3.函数的内部属性:
		在函数内部,有两个特殊的对象: arguments 和 this
			1.arguments对象:
				该对象有一个名叫 callee 的属性,该属性是一个指针,指向拥有这个 arguments 对象的函数。用以解决函数的执行与函数名耦合的问题
				function factorial(num){
					if (num <=1) {
						return 1;
					} else {
						return num * arguments.callee(num-1)	//即使函数名factorial修改了,该函数依然能正常执行(严格模式下不行)
					}
				}
				
				var factorial = (function f(num){				//严格模式下可以,推荐使用
					if(num<=1) return 1;
					else return num * arguments.callee(num-1);
				}


			2.this:
				this引用的是函数 据以执行的环境对象(当在网页的全局作用域中调用函数时, this 对象引用的就是 window)
				window.color = "red";
				this.color			// red

			3.函数对象的属性 caller
				这个属性中保存着调用当前函数的函数的引用

	4.函数属性和方法:
		1.length属性:
			length 属性表示函数希望接收的命名参数的个数
			function sum(num1, num2){
				return num1 + num2;
			}
			alert(sum.length);			//2
		2.prototype (原型)属性:
			prototype属性是保存函数对象所有的实例方法的真正所在
			换句话说,诸如toString() 和 valueOf() 等方法实际上都保存在 prototype 名下,只不过是通过各自对象的实例访问罢了。在创建自定义引用类型以及实现继承时, prototype 属性的作用是极为重要的
			创建的每个函数都有一个 prototype (原型)属性,这个属性是一个指针,指向一个对象,而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。
			每创建一个函数,就会同时创建它的 prototype 对象,这个对象也会自动获得 constructor 属性。
			
			注: 在 ECMAScript 5 中, prototype 属性是不可枚举的,因此使用 for-in 无法发现。

		3.apply() 和 call() 方法:
			每个Function对象都包含以上两个非继承而来的方法,这两个方法的用途都是在特定的作用域中调用函数,实际上等于设置函数体内 this 对象的值
			1.apply():
			apply() 方法接收两个参数:一个是在其中运行函数的作用域,另一个是参数数组。其中,第二个参数可以是 Array 的实例,也可以是arguments 对象。
			function sum(num1, num2){
				return num1 + num2;
			}
			function callSum1(num1, num2){
				return sum.apply(this, arguments);		// 传入 arguments 对象
			}
			function callSum2(num1, num2){
				return sum.apply(this, [num1, num2]);	// 传入数组
			}
			alert(callSum1(10,10));						//20
			alert(callSum2(10,10));						//20
			
			2.call():
			call() 方法与 apply() 方法的作用相同,它们的区别仅在于接收参数的方式不同。第一个参数是 this 值没有变化,但传递给函数的参数必须逐个列举出来
			function sum(num1, num2){
				return num1 + num2;
			}
			function callSum(num1, num2){
				return sum.call(this, num1, num2);	 //参数逐个列出
			}
			alert(callSum(10,10));					 //20
		
		事实上,传递参数并非 apply() 和 call() 真正的用武之地;它们真正强大的地方是能够扩充函数赖以运行的作用域
			window.color = "red";
			var o = { color: "blue" };
			function sayColor(){
				alert(this.color);
			}
			sayColor();						//red
			ayColor.call(this);				//red
			sayColor.call(window);			//red
			sayColor.call(o);				//blue

------------------------------------------------------------------------
3.单体内置对象
	内置对象:
		由 ECMAScript 实现提供的、不依赖于宿主环境的对象,这些对象在 ECMAScript 程序执行之前就已经存在了,因此开发人员不必显式地实例化内置对象,因为它们已经实例化了. 例如Object,Array 和 String,以及Global和 Math
		1.Global (全局)对象
		由于js中没有全局变量或全局函数;所有在全局作用域中定义的属性和函数,都是 Global 对象的属性,例如isNaN() 、 isFinite() 、 parseInt()等,所有原生引用类型的构造函数,像Object 和 Function ,也都是 Global 对象的属性。
		
		Global常用方法和属性:
			1.URI 编码方法:encodeURI() 和 encodeURIComponent();
				  解码方法:encodeURI() 和 encodeURIComponent();
			有效的 URI 中不能包含某些字符,例如空格。而这两个 URI 编码方法就可以对 URI 进行编码,它们用特殊的 UTF-8 编码替换所有无效的字符,从而让浏览器能够接受和理解
			使用 encodeURI() 编码后的结果是除了空格之外的其他字符都原封不动,只有空格被替换成了%20 。而 encodeURIComponent() 方法则会使用对应的编码替换所有非字母数字字符
			对整个 URI 使用 encodeURI(),对附加在现有 URI 后面的字符串使用 encodeURIComponent(),其中, decodeURI() 只能对使用 encodeURI() 替换的字符进行解码. 同样地, decodeURIComponent()只能解码encodeURIComponent()编码部分的字符

			2.eval()方法
			eval()方法就像是一个完整的 ECMAScript 解析器
			被执行的代码具有与该执行环境相同的作用域链。这意味着通过 eval() 执行的代码可以引用在包含环境中定义的变量
			在 eval() 中创建的任何变量或函数都不会被提升

			3.window 对象
			ECMAScript 虽然没有指出如何直接访问 Global 对象,但 Web 浏览器都是将这个全局对象作为window 对象的一部分加以实现的。因此,在全局作用域中声明的所有变量和函数,就都成为了 window对象的属性

*
*在没有给函数明确指定this 值的情况下(无论是通过将函数添加为对象的方法,还是通过调用 call() 或 apply() ) , this值等于 Global 对象。
*
			var global = function(){	//通过返回 this 来取得 Global 对象,在任何执行环境下都是可行的
				return this;
			}();


