
ECMS6语法特性笔记


#闭包closure
	
   js中只有函数内部的函数才能读取函数的局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”，创建闭包的常见方式，
就是在一个函数内部创建另一个函数。闭包本质上就是将函数内部和外部连接起来的一个桥梁
	如果一个函数包含内部函数，那么它们都可以看到其中声明的变量，这些变量被称为‘自由’变量，然而，这些变量可以被内部函数捕获，
从高阶函数return中实现'越狱'，以供后续使用	

	1简单理解：
	闭包是一个函数
	2.细化(阮一峰)
	闭包就是定义在一个函数内部并且能够读取其它函数内部变量的函数
	3.明确（js高级程序设计三）
	闭包是定义在一个外部函数内部，并且能够访问(存取)外部函数中自由变量的函数
	4.广义抽象(Mozilla)
	闭包是一个抽象的环境记录，它包含狭义的闭包函数以及在创建该函数时，每个自由变量及其值或名称绑定存储
区直接的一个映射

	function outer(out){
		var fun=function(inn){
			return out+inn;
		}
		return fun;
	}
	function outer(out){ 
		return function(inn){
			return out+inn;
		};
	}
	function outer(out){
		function fun(inn){
			return out+inn;
		}
		return fun;
	}
	var a=outer(10);
	var result=a(1);
	result				//11

	
1.新增语法关键字：
let,const,class,extends,super,arrow,functions,template,string,destructuring,defaut,rest,arguments

1.1：let,const
	与var类似
	ES5只有全局和函数作用域，没有块级作用域，
	ES6中let提供了块级作用域，并且不会造成变量的声明提前，建议使用 let代替var
	const声明的变量为常量
	字符串声明时新增反引号``(tab按键上面的键位符)，使用反引号可以很方便地定义动态字符串
	var a='test';
	var b=`123${a}321`
	b					//"123test321"
	
	

2:面向对象的优化设计
	class 用于定义一个‘类’，类必须包含一个constructor构造方法，class中的this关键字则代表实例对象。
constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以
共享的。
	class之间可以同通过extends 关键字实现继承，这比ES5中通过修改原形链实现继承要清晰方便很多
	super关键字，指代的是父类的实例(即父类的this对象)。子类必须在constructor方法中调用super方法，
否则会在新建实例时报错。这是因为子类没有自己的this对象，而是通过继承父类的this对象，再对其进行加工。
如果不调用super方法，子类就得不到this对象。
	ES6的继承机制，实质是先创造父类的实例对象this(所以必须先调用super方法)，然后再用子类的构造函数修改this
	
	class Animal{
		constructor(){
			this.type='animal'
		}
		show(word){
			console.log(this.type+' show '+word);
		}
	}
	class Cat extends Animal{
		constructor(){
			super();
			this.type='cat';
		}
	}
	var cat=new Cat();
	cat.show("hello")	//cat show hello
	
	对象尽量静态化，一旦定义，就不应当随意添加新的属性。如果非要添加属性，应该使用Object.assign()
	var a={};
	Object.assign(a,{name:'dafeiya'})
	a					//Object {name: "dafeiya"}
	

3: arrow function 箭头函数
	用于简化function声明函数的语法
	function(i){return i+1;}		//ES5
	(i)=>i+1						//ES6
	
	函数体多行时使用{}包裹
	function(x,y){				//ES5
		x++;
		y++;
		return x+y;
	}
	(x,y)=>{x++;y++;return x+y}	//ES6
	
	消除this指代的歧义问题。
	在使用箭头函数时，函数体中的this对象，始终指代的是定义时所在的对象，而不是使用时所在的对象。
	这并非是因为箭头函数内部有this的绑定机制，而是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this
	
#this问题
class Animal{
	constructor(){
		this.type='animal'
	}
	show(word){
		setTimeout(function(){
			console.log(this.type+' show '+word);		//setTimeout函数中的this指代的是window对象，而为当前类对象
		},1000)
	}
}	
var a=new Animal();
a.show('hello');			//undefined show hello

解决该问题有两种方法，
一：在setTimeout外部定义一个临时变量来指代this，并在setTimeout中使用该变量而不是this
show(word){
		var self=this;
		setTimeout(function(){
			console.log(self.type+' show '+word);
		},1000)
	}
二：使用bind(this)
show(word){
		setTimeout(function(){
			console.log(this.type+' show '+word);
		}.bind(this),1000)
	}	


4.template string 
	当要插入大段html内容到文档时，传统写法非常麻烦，所以
	
	
5.destructuring 解构
	ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被成为解构
	
	var name='dafeiya';
	var  age=11; 	
	var people={name,age};
	people					//Object {name: "dafeiya", age: 11}
	
6.defaut,rest
	defaut设置默认值
	function showName(name){		//ES5
		name=name || 'dafeiya';
		console.log(name);
	}
	showName()			//dafeiya

	function showName(name='dafeiya'){	//ES6
		console.log(name);
	}
	
	
7. import   export
	这两个关键字就是ES6的模块化功能关键字
	javascript中缺乏模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再通过一种简单的方法将它们链接在一起
	ES6模块化的设计思想，是尽量的静态化，使得编译时就能确认模块的依赖关系，以及输入输出的变量

	CommonJS中的模块化
		引入：var animal=require('./animal.js')
		导出：modue.exports='A cat'
	
	ES6的模块化
		引入：import animal from './animal.js'
		导出：export default 'A cat'
		export命令除了输出变量，还可以输出函数，甚至是类
		
8.迭代器遍历 for(var item of Collection)		
	该方法可用于遍历所有实现了迭代器方法的对象，比如Array,Set，Map,Object
	
	forEach(function(each){
		//...
	})
	

=======================Node.js===========================================================================
1.Buffer:
	js语言自身只有字符串数据类型，没有二进制数据类型。（浏览器中的js无法读取本地文件）
	但在处理像TCP流或者文件流时，必须使用二进制数据，因此定义了该Buffer类，该类用于创建一个专门存放二进制
数据的缓存区。
	随node内核一起发布的核心库。Buffer库为node带来了一种存储原始数据的方法，可以让node处理二进制数据。在处理IO操作
中需要移动数据时，就有可能使用Buffer库。原始数据存在Buffer实例中，一个Buffer类似与一个整数数组，但它对应于V8对内存
之外的一块内存。
	

 

















	
	
	
