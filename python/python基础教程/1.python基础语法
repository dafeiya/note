============================================================
基础语法：

1 容器: 序列和映射
	在序列中,每个元素都有编号,而在映射中,每个元素都有名称(也叫键)
	1.1 序列：list=['str',123]
		列表、元组、字符串
		1.1.1列表：list
		列表是可以修改的,而元组不可以
		有几种操作适用于所有序列,包括索引、切片、相加、相乘和成员资格检查
			索引(indexing)来获取元素,当你使用负数索引时,Python将从右(即从最后一个元素)开始往左数 list[0],list[-1]
			切片(slicing)可以来访问特定范围内的元素 list[0:],list[:]
				设定切片时的步长：默认的切片步长为1，若希望从起点和终点之间每隔一个元素提取一个元素list[2:9:2]，list[::4],步长可以为负数,即从右向左提取元素
			序列相加：[1, 2, 3] + [4, 5, 6],
				一般而言,不能拼接不同类型的序列
			序列乘法：'python' * 5
					   print('=' * 30) 
					在Python中, None 表示什么都没有。
			成员资格：要检查特定的值是否包含在序列中,可使用运算符 in，满足时返回 True ,不满足时返回 False
			常用API：
				删除元素：del list[1:3]
						  list[1:3]=[]
				插入元素：list[1:1]=insertlist
				末尾追加元素：append
				方法 insert 用于将一个对象插入列表的指定位置之后
				将序列转为列表list(seq)
				末尾追加序列：extend
				统计出现次数：count
				pop 从列表中删除一个元素,并返回这一元素。
				index 在列表中查找指定值第一次出现的索引
				remove 用于删除第一个为指定值的元素
				reverse 按相反的顺序排列列表中的元素
				sort 用于对列表排序,默认为自然排序。也可以指定排序规则。sort(key=len)按照元素长度排序，sort(reverse=True)按照自然排序的倒序排序

				其它：clear、copy、len、max、min
				
		1.1.2 元组：tuple=(32,32,1)
			与列表一样,元组也是序列,唯一的差别在于元组是不能修改的。元组语法很简单,只要将一些值用逗号分隔,就能自动创建一个元组					
		
		1.1.3 字符串：
			所有标准序列操作(索引、切片、乘法、成员资格检查、长度、最小值和最大值)都适用于字符串,但别忘了字符串是不可变的,因此所有的元素赋值和切片赋值都是非法的				  
			字符串的格式化：
				from math import pi
				"{name} is approximately {value:.2f}.".format(value=pi, name="π")
			宽度、精度和千位分隔符：
				浮点数的默认精度是6位小数
				数字默认右对齐，字符串左对齐

				宽度是使用整数指定的;精度用小数点 .整数指定;逗号 ， 表示添加千分位分隔符;绑定类型用单字母。以上可以混用
				"{pi:10.2f}".format(pi=pi)

			字符串中的替换：
				"{foo} {1} {bar} {0}".format(1, 2, bar=4, foo=3)
			string模块常用API：
				center：通过在字符串两边添加填充字符(默认为空格)让字符串居中
				find：查找子串。如果找到,就返回子串的第一个字符的索引,否则返回 -1
				join：合并序列的元素
					",".join( ['1', '2', '3'])  #'1,2,3'
				replace: 将指定子串都替换为另一个字符串,并返回替换后的结果
				split:与 join 相反,用于将字符串拆分为序列
				strip:将字符串开头和末尾的空白删除,并返回删除后的结果
				translate:与 replace 一样替换字符串的特定部分,但不同的是它只能进行单字符替换

	1.2 映射(mapping):
		1.2.1 字典 dict：{'age': 42, 'name': 'Gumby'}
			dict()可以将其它的类字段数据转为字典数据
			'{name} is {age} age'.format_map(dict) #字典的格式化
		字典是Python中唯一的内置映射类型,其中的值不按顺序排列,而是存储在键下。键可能是数、字符串或元组
		字典由键及其相应的值组成,这种键值对称为(item),每个键与其值之间都用冒号( : )分隔,项之间用逗号分隔,而整个字典放在花括号内
		字典基本操作：
			 len(d) 返回字典 d 包含的项(键值对)数。
			 d[k] 返回与键 k 相关联的值。
			 d[k] = v 将值 v 关联到键 k 。
			 del d[k] 删除键为 k 的项。
			 k in d 检查字典 d 是否包含键为 k 的项。
		常用API:
			copy:浅复制,因为值本身是原件,而非副本,某些类型的值(如序列)拷贝的是引用
			模块 copy 中的函数 deepcopy:执行深复制,即同时复制值及其包含的所有值
			fromkeys：创建一个新字典,其中包含指定的键,且每个键对应的值都是 None
			setdefault:在字典不包含指定的键时,在字典中添加指定的键-值对，如果包含，则仅返回已有的值。
			get：使用 get 来访问不存在的键时,不会引发异常,而是返回 None
			items：返回一个包含所有字典项的列表,其中每个元素都为 (key, value) 的形式。字典项在列表中的排列顺序不确定
			keys:返回一个只包含指定字典中的键的字典视图
			pop：获取与指定键相关联的值,并将该键值对从字典中删除
			popitem：类似于 list.pop ,随机地弹出一个字典项,因为字典项的顺序是不确定的,没有“最后一个元素”的概念。如果你要以高效地方式逐个删除并处理所有字典项,这可能很有用,因为这样无需先获取键列表。

2 基本语法：
	2.1 import语句：
		从模块导入时,通常使用
			import somemodule
		或使用
			from somemodule import somefunction
		或
			from somemodule import somefunction, anotherfunction, yetanotherfunction
		或
			from somemodule import *
		当模块重名时可以在语句末尾添加 as 子句并指定别名				import math as foobar

	2.2 序列解包
		可同时(并行)给多个变量赋值
			x, y, z = 1, 2, 3
			print(x, y, z,sep="_")
		要解包的序列包含的元素个数必须与你在等号左边列出的目标个数相同,否则Python将引发异常。
			people={'age': 42, 'name': 'Gumby'}
			key,value=people.popitem()
		可使用星号运算符( * )来收集多余的值,这样无需确保值和变量的个数相同
			a, b, *rest = [1, 2, 3, 4]
	2.3 链式赋值
		链式赋值是一种快捷方式,用于将多个变量关联到同一个值。
		x = y = somefunction()
		上述代码与下面的代码等价:
		y = somefunction()
		x = y
		请注意,这两条语句可能与下面的语句不等价:
		x = somefunction()
		y = somefunction()	
		与赋值一样,Python也支持链式比较:可同时使用多个比较运算符,如 0 < 10< 100 。

	2.4 条件和条件语句
		用作布尔表达式(如用作 if 语句中的条件)时,下面的值都将被解释器视为假:
		False None 0 "" () [] {}
		除以上外的表达式解释为真，这意味着任何Python值都可解释为真值。
		True + False + 42   #43
		
		== 用来检查两个对象是否相等,而 is 用来检查两个对象是否相同

		if True: 
		elif True:
		else:
	
	2.5：循环与迭代
		1.迭代序列：
			numbers = [0, 1, 2, 3]
			for number in numbers:
				print(number)

			使用range函数
			for number in range(0,4):
				print(number)
			使用range范围函数生成范围，范围类似于切片。它们包含起始位置(这里为0) ,但不包含结束位置(这里为4)
			只要能够使用 for 循环,就不要使用 while 循环

		2.迭代字典：
			d = {'x': 1, 'y': 2, 'z': 3}
			方法一：
			for key in d:
				print(key, 'corresponds to', d[key])
			方法二：
			for key, value in d.items():
				print(key, 'corresponds to', value)	

		3.并行迭代:
			有时候,你可能想同时迭代两个序列。假设有下面两个列表:
			names = ['anne', 'beth', 'george', 'damon']
			ages = [12, 45, 32, 102]
			一个很有用的并行迭代工具是内置函数 zip ,它将两个序列“缝合”起来,并返回一个由元组组成的序列。
			list(zip(names, ages))
			for name, age in zip(names, ages):
				print(name, 'is', age, 'years old')
			函数 zip 可用于“缝合”任意数量的序列。需要指出的是,当序列的长度不同时,函数 zip 将在最短的序列用完后停止“缝合”
		4.迭代时获取索引:
			使用内置函数enumerate 。这个函数让你能够迭代索引值对,其中的索引是自动提供的。
			for index, string in enumerate(strings):
				if 'xxx' in string:
					strings[index] = '[censored]'

		5. 反向迭代和排序后再迭代:
			两个很有用的函数: reversed 和 sorted 。它们类似于列表方法 reverse 和 sort ( sorted接受的参数也与 sort 类似),但可用于任何序列或可迭代的对象,且不就地修改对象,而是返回反转和排序后的版本。

		6.列表推导式
			列表推导是一种从其他列表创建列表的方式,类似于数学中的集合推导。列表推导的工作原理非常简单,有点类似于 for 循环。推导式是另外一种将for循环，if表达式以及赋值语句放在一个单一语句中的一种方法
			[x * x for x in range(10)] #打印0~9的数字的平方
			[x*x for x in range(10) if x % 3 == 0] #打印可以被3整除的
			还可添加更多的 for 部分。
			[(x, y) for x in range(3) for y in range(3)]

3. 其它语法：
		eval
		exec
		执行字符串命令，函数 exec 用于将字符串作为Python程序执行。函数 eval 计算用字符串表示的表达式并返回结果
		pass:pass 语句什么都不做,但适合用作占位符







