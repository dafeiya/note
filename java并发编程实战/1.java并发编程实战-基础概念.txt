java并发编程实战
========================================基础概念=================================================
在不涉及IO操作或共享数据访问的计算问题中，当线程数量为N(cpu)或N(cpu)+1时将获得最优的吞吐量。更多的线程并不会带来任何帮助。甚至在某种程度上会降低性能。

一.线程安全性:
		要编写线程安全的代码，其核心在于要对状态访问操作进行管理，特别是对共享的(Shared)和可变的(Mutable)状态的访问。共享意味着变量可以由多个线程同时访问，而可变意味着变量的值在其生命周期内可以发生变化。对象的状态是指存储在状态变量(例如实例或静态域)中的数据。
		要使得对象是线程安全的，需要采用同步机制来协同对象可变状态的访问，如果无法实现协同，则可能会导致数据破坏以及其它奇怪的结果。
		当多个线程访问某个状态变量并且其中有线程执行写入操作时，必须采取同步机制来协同这些线程对变量的访问。java中主要的同步机制有synchronized独占锁、volatile、显式锁以及原子变量等。
		访问某个变量的代码越少，就越容易确保对变量的所有访问都实现正确的同步，同时也更容易找出变量在哪些条件下被访问。因而程序状态的封装性越好，就越容易实现程序的线程安全性，并且代码的维护人员也越容易保持这种方式。
	*1.线程安全类：
		当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，我们就称这个类是线程安全类，并且这个类是线程安全的。
		无状态对象一定是线程安全的。
	*2.原子性：
			并发环境中的原子性与事务程序中的原子性有着相同的含义———一组语句作为一个不可分割的单元被执行，任何一个执行同步代码块的线程，都不可能看到有其它线程正在执行由同一个锁保护的同步代码块。
			形如++i;的代码看上去是一个操作，但这个操作并非原子的，它并不会作为一个不可分割的操作来执行。实际上它包含了三个独立的操作：1.读取i的值；2.将i加1；3.将计算结果写入i。这是一个"读取-修改-写入"的操作序列，并且后一步的结果状态依赖前一步的状态。在并发编程中，这种由于不恰当的执行时序而出现不正确的结果是一种非常重要的情况，它有一个正式的名字：竞态条件(Race Condition)
		2.1 静态条件：
			当某个计算的正确性取决于多个线程的交替执行时序时，就会发生静态条件。换言之，正确的结果取决于运气。最常见的竞态条件就是"先检查后执行(Check-Then-Act)"操作，即通过一个可能失效的观测结果来决定下一步的动作。当静态条件存在时，会出现线程安全问题。if,while等代码块都是非原子(nonatomic)的"先检查后执行"操作，因此多线程并发时该类代码块都有可能发生线程安全问题。
		2.2 复合操作：
			我们将类似"先检查后执行(Check-Then-Act)"，"读取-修改-写入"等包含了一组的操作称为复合操作，这种包含了一组操作但执行时必须以原子方式执行的操作必须要采用线程安全的同步机制，如加锁或使用线程安全类，否则会出现线程安全问题
	*3.加锁机制：
			锁能使其保护的代码路径以串行方式来访问，因而能确保状态的一致性。
			对多个相关的变量进行操作(复合操作的一种)，要保证它们状态的一致性，就需要在单个原子操作中更新所有相关的状态变量。
			加锁可以避免竞态条件问题。
		3.1 内置锁：
			java提供了一种内置的锁机制来支持原子性：同步代码块(Synchronized Block)，同步代码块包含两个部分：一个作为锁的对象引用，一个作为由这个锁保护的代码块。
			synchronized (lockObj) {
				//访问或修改共享变量的状态
			}
			每个java对象都可以用作一个实现同步的锁，这些锁称为内置锁(Intrinstic Lock)或监视器锁(Monitor Lock)。线程在进入同步代码块之前会自动获得锁，并在退出同步代码块时自动释放锁。无论是通过正常的控制路径退出还是在同步块中抛出异常退出，获得内置锁的唯一途径就是进入由这个锁保护的同步代码块或方法。
			java的内置锁相当于一种互斥体(或称为互斥锁)，这意味着只有一个线程能持有这种锁。当线程A尝试获取一个由线程B持有的锁时，线程A必须等待或者被阻塞，直到线程B释放这个锁，如果B永远不释放锁，那么A也将永远地等下去。这种内置锁确保了复合操作的原子性执行，由于每次只有一个线程执行内置锁保护的代码块，因此由synchronized锁保护的同步代码块会以原子方式执行，多个线程在执行该代码块时也不会相互干扰。
			synchronized内置锁这种机制使得保证线程安全性变得更简单，然而这种方法却过于极端，web应用中多个客户端线程无法同时使用同步块中的代码，服务器的性能响应非常低，无法令人接受。这是一个并发性能问题，而不是线程安全问题。
		3.2 内置锁的可重入性
			当某个线程请求一个由其它线程持有的锁时，发出请求的线程会被阻塞。然而由于内置锁是可重入的，因此如果某个线程试图获得一个已经由它自己持有的锁，那么这个请求就会成功。"重入"意味着获取锁的操作的粒度是线程，而不是调用。这与pthread(Posix线程)互斥体的默认加锁行为不同，pthread互斥体的获取操作是以调用为粒度的。
			重入机制的一种实现方式是：为每个锁关联一个获取计数值和一个所有者线程。当计数值为0时，这个锁就被认为是没有被任何线程持有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将计数值置为1。如果同一个线程再次获取这个锁时，计数值将递增，而当前线程退出同步代码块时，计数器会相应地递减。当计数值为0时，锁将被释放。
	*4.用锁来保护状态：
		一种常见的错误是认为，只有在写入共享变量时才需要使用同步，然而事实并非如此。
		对于可能被多个线程同时访问的可变状态变量，在访问它时都需要持有同一个锁，在这种情况下，我们称状态变量是由这个锁保护的。
		每个共享的和可变的变量都应该只由一个锁来保护，从而使维护人员知道是哪一个锁。
		一种常见的加锁约定是，将所有的可变状态都封装在对象内部，并通过对象的内置锁对所有访问可变状态的代码路径进行同步，使得在该对象上不会发送并发访问。许多线程安全类中都使用了这种模式，例如一些同步集合类。在这种情况下，对象状态中的所有变量都由对象的内置锁保护起来。然而，如果在添加新的 方法或代码路径时忘记了使用同步，那么这种锁协议会很容易被破坏。
		虽然synchronized方法可以确保单个操作的原子性，但如果要把多个操作合并为一个复合操作，还是需要额外的加锁机制。此外，将每个方法都作为同步方法还会导致活跃性问题和心跟那个问题。
	*5.活跃性(Liveness)与性能(Performance)
		在web开发的Servlet中，若对Servlet中的共享变量及其操作使用内置锁来保护，该策略的实现方式即为对整个Servlet进行同步。虽然这种简单且粗粒度的方法能确保线程安全性，但付出的代价却很高，每次只能有一个线程可以执行，这就背离了Servet框架的初衷。Servlet的目的是需要同时处理多个请求，而同步锁在负载过高的情况下会给用户带来糟糕的体验。我们将这种web应用程序称之为不良并发(Poor Concurrency)应用程序。
		上述问题的一种解决方案是缩小同步代码块的作用范围，来实现既确保Servlet并发性，同时又维护线程安全性。要确保同步代码块不要过小，并且不要将本应是原子的操作拆分到多个同步代码块中。应该尽量将不影响共享状态且执行时间较长的操作从同步代码块中分离出去，从而在这些操作的执行过程中，其它线程可以访问共享状态。
		要判断同步代码块的合理大小，需要在各种设计需求之间进行权衡，包括安全性(必须保证)、简单性和性能。有时候在简单性和性能之间会发生冲突，但在二者通常能找到某种合理的平衡。
		当使用锁时，应该清楚同步代码块中实现的功能，以及执行该代码块需要多长的时间。无论是执行计算密集型的操作，还是执行某个可能阻塞的操作，如果持有锁的时间太长，那么都会带来活跃性或性能问题。
------------------------------------------------------------------------------------------------------------
二.对象的共享：
		如前面已经指出的，要编写正确的并发程序，关键问题在于：在访问共享的可变状态时需要进行正确的管理。
		我们已经知道同步代码块和同步方法可以确保以原子的方法执行操作，但一种常见的误解是，认为关键字synchronized只能用于实现原子性或确定临界区(Critical Section)。但同步还有另一个重要的方面：内存可见性(Memory Visibility)。我们不仅希望防止某个线程正在使用对象状态而另一个线程在同时修改该状态，并且希望确保当一个线程修改了该对象状态后，其它线程能够看到发生的状态变化。如果没有同步，那么这种情况就无法实现。你可以通过显示的同步或者类库中内置的同步来保证对象被安全地发布。
	*1.内存可见性(Memory Visibility)：
		可见性是一种复杂的属性，因为可见性中的错误总是会违背我们的直觉。单线程中的变量读写总是正确的，这感觉很自然。但是当读写操作在不同线程中执行时，情况却并非如此。通常我们无法确保执行读操作的线程能适时地看到其它线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。
		1.1 失效数据：
			图片[内存可见性-共享变量的读写问题.png]中展示了在缺乏同步的程序中可能产生错误结果的一种情况：失效数据。当读线程查看ready变量时，可能会得到一个已经失效的值。除非在每次访问变量时都使用同步，否则很可能获得该变量的一个失效值。更糟糕的是，失效值可能不会同时出现：一个线程可能获得某个变量的最新值，却获得另一个变量的失效值。
			通常，当食物过期时，还是可以食用的，只不过味道差了一些。但是失效的数据可能导致更危险的情况。例如导致一些严重的安全性和活跃性问题。还可能导致输出错误的值，或者使程序无法结束。如果对象的引用实现，那么情况会更复杂。
		1.2 非原子的64位操作：
			当线程在没有同步的情况下读取变量时，可能会得到一个失效值，但至少这个值是由之前某个线程设置的值，而不是一个随机值。这种安全性保证也被称为最低安全性(out-of-thin-airsafety)。	
			最低安全性适用于绝大多数变量，但是存在一个例外：非volatile类型的64位数值变量(double和long)。java内存模型要求，变量的读取操作和写入操作都必须是原子操作，但对于非volatile类型的long和double变量，JVM是将64位的读操作或写操作分解为两个32位的操作。因此当读取一个非volatile类型的long变量时，如果该变量的读写操作在不同的线程中执行，那么很可能会读取到某个值的高32位和另一个值的低32位。所以即使不考虑失效数据uwent，在多线程程序中使用共享且可变的long和double等类型的变量也是不安全的，除非用关键字volatile来声明它们，或者用锁保护起来。以上问题取决于CPU处理器的架构。32位的处理器会有这种问题。
		1.3 加锁保证可见性：
			内置锁可以用于确保某个线程以一种可预测的方式来查看另一个线程的执行结果。线程B执行由锁保护的同步代码块时，可以看到线程A之前在同一个同步代码块中的所有操作结果，如果没有同步机制，则无法实现这种保证。
			内置锁的含义不仅仅局限于互斥和保证操作的原子性行为，还包括内存可见性。为了确保所有线程都能看到共享变量的最新值，所有执行读操作或者写操作的线程都必须在同一个锁上同步。
		1.4 volatile变量：
			java语言提供了一种稍弱的同步机制，即volatie变量，用来确保将变量的更新操作通知到其它线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其它内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其它处理器不可见的地方，因此在读取volatile修饰的变量时总会返回最新写入的值。
			加锁机制既可以确保可见性又可以确保原子性，而volatile变量只能确保可见性。volatile变量是一种比synchronized关键字更轻量级的同步机制。该变量是无法单独保证线程安全的。
			理解volatie变量的一种有效方法是：对volatile修饰的成员变量的读写操作分别替换为get/set方法，但在get时不执行加锁操作，只在set时添加同步锁操作。
			volatile变量对可见性的影响比volatile变量本身更为重要。当线程A首先写入一个volatile变量并且线程B随后读取该变量时，在写入volatile变量之前对A可见的所有变量的值，在B读取了volatile变量后，对B也是可见的。因此，仅从内存可见性的角度来看，写入volatile变量相当于退出同步代码块，而读取volatile变量相当于进入同步代码块。(上述这种类比并不严谨，synchronized在内存可见性的控制上比volatile变量更强)。volatile的非竞争同步将消耗20~250个时钟周期，虽然它的同步开销不为零，但它对应用程序整体性能的影响微乎其微。
			
	*2.发布和溢出
	*3.线程封闭(Thraed Confinement)
		当访问共享的可变数据时，通常需要使用同步。一种避免使用同步的方式就算不共享数据。如果仅在单线程内访问数据，就不需要同步。这种技术被称为线程封闭，它是实现线程安全的最简单的方式之一。当某个对象封闭在一个线程中时，这种用法将自动实现线程安全性，即使被封闭的对象本身不是线程安全的。
		在java语言中并没有强制规定某个变量必须由锁来保护，同样在java语言中也无法强制将对象封闭在某个线程中。线程封闭是在程序设计中的一个考虑因素，必须在程序中实现。java提供了一些机制来帮助维持线程的封闭性，例如局部变量和ThreadLocal类，但即便如此，程序员依然需要负责确保封闭在线程中的对象不会从线程中逸出。
		3.1 Ad-hoc线程封闭
		3.2 栈封闭
			栈封闭是线程封闭的一种特例。又被称为线程内部使用或者线程局部使用。局部变量的固有属性之一就算封闭在执行线程中。它们位于执行线程的栈中，其它线程无法访问这个栈。对于基本类型的局部变量，始终都封闭在线程内，因此无论如何都不会破坏栈封闭性。
		3.3 ThreadLocal类
			维持线程封闭的一种更规范的方法是使用ThreadLocal，这个类能使线程中的某个值与保存值的对象关联起来。ThreadLocal提供了get/set等访问接口，这些接口为每个使用变量的线程都存有一份独立的副本，因此get总是返回由当前执行线程在调用set时设置的最新值。
			ThreadLocal对象通常用于防止对可变的单实例变量或全局变量进行共享。简单从概念上看，ThreadLocal<T>视包含了Map<Thread,T>对象，其中保存了特定于该线程的值，但ThreadLocal的实现实际上并非如此。这些特定与线程的值被保存在Thread对象中，当线程终止后，这些值会被GC回收。
			每一个线程的Thread对象中都有一个ThreadLocalMap对象，这个对象中存储了一组以ThreadLocal.threadLocalHashCode为key，以本地线程变量为value的K-V对，而ThreadLocal就算当前线程的ThreadLocalMap的访问入口，每一个ThreadLocal对象都包含了一个独一无二的ThreadLocalHashCode的值，使用这个值就可以在线程K-V键值对中找到对应的本地线程变量。
		3.4 不变性
			使用不可变对象的线程一定是线程安全的。
			满足以下条件之一时，对象才是不可变的：
				对象创建后其状态就不能修改
				对象的所有域都是final的
				对象是正确创建的(在对象的创建期间，this引用没有逸出)
			除非需要更高的可见性，否则应将所有的域都声明为私有域是一个良好的编程习惯。同样的，除非需要某个域是可变的，否则应该将其声明为final域也是一个良好的编程习惯。
		3.5 对象的安全发布
				1.不可变对象与初始化安全性
				2.事实不可变对象
				3.可变对象
					要安全地共享可变对象，这些对象就必须被安全地发布，并且必须是线程安全的或者由某个锁保护起来。
					如果对象在构造后可以修改，那么安全发布只能确保"发布当时"状态的可见性。对于可变对象，不仅在发布对象时需要使用同步，而且在每次对象访问时同样需要使用同步来确保后续修改操作的可见性。
					对象的发布需求取决于它的可变性：
						1.不可变对象可以通过任意机制来发布。
						2.事实不可变对象必须通过安全方式来发布。
						3.可变对象必须通过安全方式来发布，并且必须是线程安全的或者由某个锁保护起来。
				4.安全地共享对象
					当获得对象的一个引用时，你需要知道在这个应用上可以执行哪些操作。在使用它之前是否需要获得一个锁？是否可以修改它的状态，或者只能读取它？许多并发错误都是由于没有理解共享对象的这些"既定规则"而导致的。当发布一个对象时，必须明确地说明对象的访问方式。
					在并发程序中能够使用和共享对象时，可以使用一些实用的策略，包括：
						1.线程封闭：线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。
						2.只读共享：在没有额外同步的情况下，共享的只读对象可以由多个线程并发访问，但任何线程都不能修改它。共享的只读对象包括不可变对象和事实不可变对象。
						3.线程安全共享：线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步。
						4.保护对象：被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其它线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。
	*4.对象的组合：
		该部分将介绍一下组合模式，这些模式通过使用一些jdk现有的线程安全组件来组合为更大规模的组件或程序，从而使一个类更容易称为线程安全的，并且在维护这些类时不会无意中破坏类的安全性。
		4.1  设计线程安全性的类
			1.收集同步需求
			2.依赖状态的操作
			3.状态所有权
		4.2 实例封闭
			1.java监视器模式：
				从线程封闭原则及其逻辑推论可以得出java监视器模式。遵循java监视器模式的对象会把对象的所有可变状态都封装起来，并由对象自己的内置锁来保护。
				java监视器模式仅仅是一种编写代码的约定，对于任何一种锁对象，只要自始至终都使用该锁对象，都可以用来保护对象的状态。许多jdk类库中都使用了java监视器模式，例如Vector和Hashtable。然而在某些情况下，程序需要通过细粒度的加锁策略来提高伸缩性，这是一种更为复杂的同步策略。而java监视器模式的主要优势在于其简单性。
		4.3 线程安全性的委托
			2.独立的状态变量
			3.当委托失效时
			4.发布底层的状态变量
		4.4 在现有的线程安全类中添加功能
			1.客户端加锁机制
		4.5 将同步策略文档化
	*5.基础构建模块		
		jdk中为我们提供了丰富的并发基础构建模块，例如线程安全的容器类以及各种用于协调多个相互协作的线程控制流的同步工具类(Synchronizer)
		5.1 同步容器类：
			同步容器类包括Vector和Hashtable，这些类实现线程安全的方式是：将它们的状态封装起来，并对每个公有方法都进行同步，使得每次只有一个线程能访问容器的状态。
			1 迭代器与ConcurrentModificationException
				对容器类进行迭代的标准方式都是使用Iterator。然而，如果有其它线程并发地修改容器，那么即使是使用迭代器也无法避免在迭代期间对容器加锁。在设计同步容器类的迭代器时并没有考虑到并发修改的问题，并且它们表现出的行为是"及时失败(fail-fast)"的。这意味着当它们发现容器在迭代过程中被修改时，就会抛出一个ConcurrentModificationException异常。这种"及时失败"的迭代器并不是一种完备的处理机制，它只是"善意地"捕获并发错误，因此只能作为并发问题的预警指示器。它们采用的实现方式是：将计数器的变化与容器关联起来，如果在迭代期间计数器被修改，那么hasNext或next将抛出异常。这是一种设计上的权衡，从而降低并发修改操作的检测代码对程序性能带来的影响。
				迭代的时候加内置锁虽然可以保证当前线程迭代的正常执行，但其它线程对容器进行修改时必须要等迭代结束，数据量较大时会有饥饿或死锁等风险。
				如果不希望在迭代期间对容器加锁，那么一种替代方式就是"克隆容器，并在副本上进行迭代。这样可以避免排除ConcurrentModificationException异常"。但在克隆容器时存在显著的性能开销。这种方式的好坏取决于多个因素，包括容器大小，在每个元素上执行的工作，迭代操作的频率，以及响应时间和吞吐量等
			2. 隐藏迭代器
				虽然加锁可以方式迭代器抛出ConcurrentModificationException，但实际情况下要更加复杂。因为在某些情况下，迭代器会被隐藏起来。例如编译器会将字符串的连接操作转换为调用StringBuilder.append(Object),而这个方式又会调用容器的toString方法，标准容器的toString方法将迭代容器，并在每个元素上调用toString来生成容器的格式化表示。
				此外，容器的hashCode和equals等方法会间接地执行迭代操作，当容器作为另一个容器的元素或键值时，就会出现这种情况。同样，containsAll、removeAll和retainAll等方法，以及把容器作为参数的构造函数，都会对容器进行迭代。所有这些间接的迭代操作都可能抛出ConcurrentModificationException异常
		5.2 并发容器：
			同步容器类将所有对容器状态的访问都串行化，以实现它们的线程安全性。但这种方法的代价是严重的降低并发性，当多个线程竞争容器的锁时，吞吐量将严重降低。
			而并发容器是专门针对多个线程并发访问设计的。jdk1.5中增加了ConcurrentHashMap，用来替代同步且基于散列的Map，以及CopyOnWriteArrayList等。通过并发容器来代替同步容器，可以极大地提高伸缩性并降低风险。
			1.ConcurrentHashMap:
				ConcurrentHashMap也是一个基于散列的Map，但它使用了一种完全不同的加锁策略来提供更高的并发性和伸缩性。ConcurrentHashMap并不是将每个方法都在同一个锁上同步并使得每次只能有一个线程访问容器，而是使用一种粒度更细的加锁机制来实现更大程度的共享，这种机制称为分段锁(Lock Striping)。这种机制中，任意数量的读线程可以并发地访问Map，执行读取操作的线程和执行写入操作的线程可以并发地访问Map，并且允许一定数量的写入线程可以并发地修改Map。由此在并发访问环境下将实现更高的吞吐量，而在单线程环境中只损失非常小的性能。
				ConcurrentHashMap提供的迭代器不会抛出ConcurrentModificationException异常，因此不需要在迭代过程中对容器加锁。ConcurrentHashMap返回的迭代器具有弱一致性(Weakly Consistent),而非"及时失败"。这种弱一致性的迭代器可以容忍并发的修改，当创建迭代器时会遍历已有的元素，并可以(但是不保证)在迭代器被构造后将修改操作反映给容器。
				尽管有这些改进，但仍然有一些需要权衡的因素。对于一些需要在整个Map上进行计算的方法，例如size和isEmpty，这些方法的语义被略微减弱了以反映容器的并发特性。由于size返回的结果在计算时可能已经过期了，它实际上只是一个估计值，因此允许size返回一个近似值而不是一个精确值。虽然这看上去有些令人不安，但事实上这样的方法在并发环境下用处很小，因为它们的返回值总在不断变化。因此，这些操作的需求被弱化了，以期换取对其它更重要操作的性能优化，包括get、put、containsKey和remove等。
				用ConcurrentHashMap有着更多的优势以及更少劣势，因此在大多数情况下，用ConcurrentHashMap来代替同步Map能进一步提高代码的可伸缩性。只有当应用程序需要加锁Map以进行独占访问时，才应该放弃使用ConcurrentHashMap。
			2.CopyOnWriteArrayList：
				CopyOnWriteArrayList用于替代同步List(类似的，CopyOnWriteArraySet的作用是替代同步set)，在某些情况下它提供了更好的并发性能，并且在迭代时不需要对容器进行加锁或复制。
				写入时复制(Copy-On-Write)容器的线程安全性在于：每次修改时，都会创建并重新发布一个新的容器副本，从而实现可变性。Copy-On-Write容器的迭代器会保留一个指向底层基础数组的引用，这个数组当前位于迭代器的起始位置，由于它不会被修改，因此在对其进行同步时只需要确保数组内容的可见性。因此多个线程可以同时对这个容器进行迭代，而不会彼此干扰或者与修改容器的线程相互干扰，Copy-On-Write容器返回的迭代器不会抛出ConcurrentModificationException，并且返回的元素与迭代器创建时的元素完全一致，而不必考虑之后修改操作所带来的影响。
				显然，每当修改容器时都会复制底层数组需要一定的开销，特别是当容器的规模较大时。因此仅当迭代操作远远多于修改操作时，才应该使用Copy-On-Write容器。
				这个准则很好地描述了很多事件通知系统：在分发通知时需要迭代已注册监听器的链表，并调用每一个监听器，在大多数情况下，注册和注销事件的操作远少于接收事件通知的操作。
		5.3 阻塞队列 BlockQueue
				在构建高可用的程序时，有界队列是一种强大的资源管理工具，它能抑制并防止过多的工作项，并提供安全的同步机制，使应用程序在负荷过载的情况下变得更加健壮。
			5.3.1 BlockQueue说明			
				阻塞队列提供了可阻塞的put和take方法，以及支持定时的offer和poll方法。若队列已满，那么put方法将阻塞知道有可用的空间可用；若队列为空，那么take方法会阻塞直到有元素可用。队列可以是有界的(基于数组)也可以是无界的(基于链表)。无界队列永远不会被充满，因此无界队列上的put方法也永远不会被阻塞。
				阻塞队列支持生产者-消费者的设计模式。它消除了生产者类和消费者类之间的代码依赖性，此外，该模式还将生产数据的过程与使用数据的过程解耦开来以简化工作负载的管理，因为这两个过程在处理数据的速率上有所不同。
				
				阻塞队列BlockQueue有多种实现：LinkedBlockQueue、ArrayBlockQueue、PriorityBlockQueue、SynchronousQueue
				LinkedBlockQueue、ArrayBlockQueue是FIFO队列，两者分别与LinkedList和ArrayList有更好的并发性能。
				PriorityBlockQueue是一个按优先级排序的队列，既可以按照元素自然顺序来比较元素(需要实现Comparable)，也可以使用Comparator来比较。
				SynchronousQueue队列与其它阻塞队列不同，它实际上并不是一个真正的队列，因为它不会为队列中的元素维护存储空间。它维护一组线程，这些线程在等待着把元素加入或移出队列。因为SynchronousQueue没有存储功能，因此put和take会一直阻塞，知道有另一个线程已经准备好参与到交付过程中。仅当有足够多的消费者，并且总是只有一个消费者能够获取交付的工作时，才适合使用该同步队列。
			5.3.2 串行线程封闭
				BlockQueue的各种阻塞队列中包含了足够的内部同步机制，能够保证将对象安全地从生产者线程发布到消费者线程。对于可变对象，生产者-消费者这种设计与阻塞队列一起，促进了串行线程封闭，从而将对象所有权从生产者交付给消费者。线程封闭对象只能由单个线程拥有，但可以通过安全地发布该对象来"转移"所有权。在转移所有权后，也只有一个线程能获得这个对象的访问权限，并且发布对象的线程不会再访问它。
				
				核心思想：通过将多个并发的任务存入阻塞队列来实现任务的串行化，并为这些串行化的任务创建唯一的一个工作线程进行处理。
				本质：使用一个开销更小的锁(队列锁)去替代另一个可能开销更大的锁(非线程安全对象引用的锁)，
				使用场景：需要使用非线程安全的对象，但又不希望引入锁。
				
			5.3.3  双端队列与工作窃取
				java6增加了双端队列Deque和阻塞双端队列BlockingDeque，实现了在队列头和队列尾的高效插入和移除。具体实现包括ArrayDeque和LinkedBlockDeque
				正如阻塞队列适用于生产者-消费者模式一般，双端队列同样适用于另一种相关模式，即工作密取(Work    Stealing)。在生产者-消费者设计中，所有消费者共用一个工作队列，而在工作密取设计中，每个消费者都有各自的双端队列，如果一个消费者完成了自己双端队列中的全部工作，那么它可以从其它消费者双端队列末尾秘密地获取工作。密取工作模式比传统的生产者-消费者模式具有更高的可伸缩性，这是因为工作者线程不会在单个共享的任务队列上发生竞争。在大多时候，它们都只是访问自己的双端队列，从而极大地减少竞争，但当工作线程需要访问另一个队列时，它会从队列的尾部而不是从头部获取任务，因此进一步降低了队列上的竞争程度。
		5.4 阻塞方法与中断方法
			线程可能会阻塞或暂停执行，原因有多种:等待IO，等待获得一个锁，等待从Thread.sleep方法中醒来，或是等待另一个线程的计算结果。当线程阻塞时，它通常被挂起，并处于某种阻塞状态(Blocked,waiting,timed_waiting)。被阻塞的线程必须等待某个不受她控制的时间发生后才能继续执行，例如等待IO操作完成，等待某个锁变得可用，或者等待外部计算结束，当某个外部事件发生时，线程被置回Runable状态，并可以再次被调度执行。
			Thread提供了interrupt方法，用于中断线程或者查询线程是否已经被中断。每个线程中都有一个标识线程是否被中断的boolean变量。
			中断是一种协作机制，一个线程不能强制其它线程停止正在执行的操作而去执行其它操作，当线程A中断B时，A仅仅是要求B在执行到某个可以暂停的地方停止正在执行的工作——前提是B愿意停下来。
			当某方法抛出InterruptedException时，表示该方法是一个阻塞方法，如果这个方法被中断，那么线程将努力提前结束阻塞状态。当在代码汇总调用了一个将抛出InterruptedException异常的方法时，你自己的方法也就变成了一个阻塞方法，并且必须要处理对中断的响应。从代码上看，有两种基本选择：
				1.传递InterruptedException。
					避开这个异常通常是最明智的策略——把InterruptedException异常抛给方法调用者。具体方法包括，直接抛出根本不捕获该异常;或者捕获该异常，然后在执行某种简单的清理工作后再次抛出该异常。
				2.恢复中断。
					有时候不能抛出InterruptedException异常，例如当代码是Runnable的一部分时。在这种情况下，必须捕获InterruptedException，并通过调用当前线程上的interrupt方法恢复中断状态，这样在调用栈中更高层的代码将看到引发了一个中断。
				一定要注意在出现InterruptedException时最不应该做的事情是，捕获它但不做出任何响应。因为这将使调用栈上更高层的代码无法对中断采取处理措施，因为线程被中断的证据已经丢失。
				只有在一种特殊的情况中才能屏蔽中断，即对Thread进行单独的扩展，并且能控制调用栈上所有更高层的代码。
		5.5 同步工具类
				在容器类中，阻塞队列是一种独特的类：它们不仅能作为保存对象的容器，还能作为协调生产者和消费者等线程之间的控制流。阻塞队列可以作为同步工具类，其它类型的同步工具类还包括信号量(Semaphore)、栅栏(Barrier)、闭锁(Latch)等。
				所有的同步工具类都包含一些特定的结构化属性:它们封装了一些状态，这些状态将决定执行同步工具类的线程是继续执行还是等待，此外还提供了一些方法对状态进行操作，以及另一些方法用于高效地等待同步工具类进入到预期状态。
			5.5.1 闭锁 Latch
				闭锁是一种用于延迟线程的进度直到其到达终止状态的同步工具类。
				闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门一直是关闭的，并且没有任何线程能通过，当到达结束状态时，这扇门会打开并运行所有的线程通过。当闭锁到达结束状态后，将不会再改变状态，这扇门将永远保持打开状态。
				CountDownLatch是一种灵活的闭锁实现，可以在上述各种情况中使用，它可以使一个或多个线程等待一组事件发送。闭锁状态包括一个计数器，该计数器被初始化为一个正数，表示需要等待的事件数量。countDown方法递减计数器，表示有一个事件已经发生了，而await方法等待计数器到0，这表示所有需要等待的事件都已经发送。如果计数器的值非0，那么await会一直阻塞直到计数器为0，或者等待中的线程中断，或者等待超时。
				常用于需要控制多个线程同时并发执行某个任务的场景。如果在创建线程后立即启动它们，那么先启动的线程将"领先"启动后的线程，并且活跃线程数量会随着时间的推移而增加或减少，竞争程度也在不断发生变化。启动门将使得主线程能够同时释放所有工作线程，而结束门则使主线程能够等待最后一个线程执行完成，而不是顺序地等待每个线程执行完成。
			5.5.2 FutureTask
				FutrueTask表示一个计算的过程，这个过程可能已经计算完成，也可能正在进行。如果有结果可用，那么FutureTask.get将立即返回结果，否则它会一致阻塞，直到结果计算出来将其返回。
				FutureTask实现了Future语义，表示一种抽象的可生成结果的计算。FutureTask是通过Callable实现的，相当于一种可生成结果的Runnable，并且可以处于一下3种状态：等待状态(waiting to run)，正在运行(running),执行完成(completed)。执行完成表示计算的所有可能结束方式，包括正常结束、自己取消结束、由于异常而结束等。当FutureTask进入完成状态后，它会永远停止在这个状态上。
				Future.get的行为取决于任务的状态。如果任务已经完成，那么get会立即返回结果，否则get将阻塞直到任务进入完成状态，然后返回结果或抛出异常。FutureTask将计算结果从执行计算的线程传递到获取这个结果的线程，而FutureTask的规范确保了这种传递过程能实现结果的安全发布。
			5.5.3 信号量 Counting Semaphore
				计数信号量(Counting Semaphore)用来控制同时访问某个特定资源的操作数量，或者同时执行某个指定操作的数量。计数信号量还可以用来实现某个资源池，或者对容器施加边界。
				Semaphore中管理着一组虚拟的许可(permit)，许可的初始数量可通过构造函数来指定。在执行操作时可以首先获得许可(如果有剩余)，并在使用后释放许可。如果没有许可，那么acquire将阻塞直到有许可(或者直到被中断或者操作超时)。release方法将返回一个许可给信号量。
				你可以使用Semaphore将任何一种容器编程有界阻塞容器。将信号量的计数值初始化为容器容量的最大值，在add操作之前，先要获取一个许可，同样在remove操作时释放一个许可。而底层的Set实现并不知道关于边界的任何信息。
			5.5.4 栅栏 Barrier
				栅栏类似于闭锁，它能阻塞一组线程直到某个事件发送。栅栏与闭锁的关键区别在于，所有线程必须同事的到达栅栏位置，才能继续执行。闭锁用于等待事件，而栅栏用于等待其它线程。栅栏可以用于实现实现一些策略，例如几个家庭决定在某个地方集合:"所有人6:00"在金拱门集合，到了以后要等其他人，等到人来全后再讨论下一步要做的事情。
				CyclicBarrier可以使一定数量的参与方反复地在栅栏位置汇集，它在并行迭代算法中非常有用	
				Exchanger：这是另一种栅栏形式，它是一种两方(two-party)栅栏，各方在栅栏位置上交换数据。当两方执行不对称的操作时，Exchanger会非常有用，例如当一个线程向缓冲区写入数据，而另一个线程从缓冲区读取数据。这些线程可以使用Exchanger来汇合，并将满的缓冲区与空的缓冲区交换。当两个线程通过Exchanger交换对象时，这种交换就把这两个对象安全地发布给另一方。
				
		5.6 构建高效且可伸缩的结果缓存
			几乎所有的服务器应用程序都会使用某种形式的缓存。缓存是以消耗更多内存为代价来重用之前的计算结果以降低延迟，提高吞吐量。简单的缓存可以将性能瓶颈转变为可伸缩性瓶颈。
			
*线程状态说明：
	java.lang.Thread.State的线程状态枚举类中定义了一下几种状态类型：
		1.NEW:线程创建尚未启动
		2.RUNNABLE:包括OS状态中的Ready和Running，可能在等待时间片或者正在执行
		3.BLOCK：线程被阻塞
		4.WAITING:不会分CPU时间片，直到被别的线程显式唤醒，获取无限期等待。没有设置Timeout参数的Object.wait和Thread.join会导致此现象。
		5.TIMED_WAITING:有限期等待。不会分配CPU时间片，直到被系统自动唤醒，不需要别的线程显式唤醒。Thread.sleep，以及设置了Timeout的Object.wait和Thread.join等
		6.TERMINATED:线程执行结束。
	阻塞和等待的区别：
		阻塞状态BLOCK是在等待一个排它锁，直到别的线程释放该排它锁，该线程获取到该锁才能退出阻塞状态。
		等待状态的线程是指等待一段时间，它将由系统或者其它线程唤醒，该线程退出等待状态。
	在任一时刻，线程只能处于其中之一的状态。
-------------------------------------------------------------------------------
总结：
	1.可变状态是至关重要的
		所有的并发问题都可以归纳为如何协调对并发状态的访问，可变状态越少，越容易保证线程安全性。
	2.不可变对象一定是线程安全的
		不可变对象能极大地降低并发编程的复杂性。它们更为简单且安全，可以任意共享而无须使用加锁或保护性复制等机制。
	3.封装有助于管理复杂性
		在编程线程安全的程序时，虽然可以将所有数据都保存在全局变量中，但把数据封装在对象中，将更易于维持不变性条件：将同步机制封装在对象中，更易于遵循同步策略。
	4.用锁来保护每个可变变量。
	5.当保护同一个不变性条件中的所有变量时，要使用同一个锁。
	6.在执行复合操作期间，要持有锁
	7.如果从多个线程中访问同一个可变变量时没有同步机制，那么程序会出现问题。
	8.不要故作聪明地推断出不需要使用同步。
	9.在设计过程中考虑线程安全，或者在文档中明确地指出它不是线程安全的。
	
==============================================================================================================================
高级主题：
	
13.显式锁(ReentrantLock)：
		jdk1.5增加了一种新的机制：ReetrantLock。ReentrantLock的目的并不是为了替代内置锁，而是当内置加锁机制不适用时，作为一种可选的高级功能。
		
		13.1 Lock与RrentrantLock：
			//Lock接口：
			public interface Lock {
				void lock();
				void lockInterruptibly() throws InterruptedException;
				boolean tryLock();
				boolean tryLock(long timeout,TimeUnit unit) throws InterruptedException;
				void unlock();
				Condition newCodition();
			}
			ReentrantLock实现了Lock接口，并提供了与Synchronized相同的互斥性和内存可见性。在获取ReentrantLock时，有着与进入同步代码块相同的内存语义，在释放ReentrantLock时，同样有着退出同步代码块相同的内存语义。此外ReentrantLock有着和Synchronized同样的可重入的加锁语义。与Synchronized不同的是，ReentrantLock支持Lock接口中定义的所有获取锁的模式，并在处理锁的不可用性问题中提供了更高的灵活性。
			
			为什么需要创建一种与内置锁如此相似的新的加锁机制？
				大多数情况下，内置锁都能很好地工作，但在功能上存在一些局限性，例如，无法中断一个正在等待获取锁的线程，或者无法在请求获取一个锁时无限地等待下去。内置锁必须在获取该锁的代码块中释放，这就简化了编码工作，并且与异常处理操作实现了很好的交互，但却无法实现非阻塞结构的加锁规则，这些都是使用Synchronized的原因。
		
		13.1.1 轮询锁与定时锁：
		13.3 公平性：
			在ReentrantLock的构造函数中对于公平性提供了两种选择：非公平的锁(默认)或公平的锁。
			在公平的锁上，线程将按照它们发出请求的顺序来获得锁，等待时间最长的线程优先获得锁。
			在非公平的锁上，则允许"插队"，当一个线程请求非公平的锁时，如果在发出请求的同时该锁的状态变为可用，那么这个线程将跳过队列中所有的等待线程并获得这个锁。(在Semaphore中同样可以选择采用公平的或非公平的获取顺序)
			
			可定时的与可轮询的锁获取模式是由tryLock方法实现的，与无条件的锁获取模式相比，它具有更完善的错误恢复机制。在内置锁中，死锁是一个严重的问题，且恢复的唯一方式只有重新启动程序，而防止死锁的唯一方式就是在构造程序时避免出现不一致的锁顺序。可定时的与可轮询的锁提供了另一种选择：避免死锁的发生。
			当需要实现一个定时的和可中断的锁获取操作时，可以使用tryLock方法
		
		13.4 Synchronized和ReentrantLock之间进行选择：
			在一些内置锁无法满足需求的情况下，ReentrantLock可以作为一种高级工具。当需要一些高级功能时才应该使用ReentrantLock，这些功能包括：可定时的、可轮询的、可中断的锁获取操作、公平队列、以及非块结构的锁。否则，还是应该优先使用Synchronized。
			Synchronized的语法简洁紧凑，并且与ReentrantLock相比，在线程转储中还能给出在哪些调用帧中获得了哪些锁，并能够检测识别发生死锁的线程。而JVM并不直到哪些线程持有ReentrantLock，因此在调试使用ReentrantLock的线程问题时，将起不到任何帮助
		
		13.5 读-写锁：
			public interface ReadWriteLock {
				Lock readLock();
				Lock writeLock();
			}
			class ReentrantReadWriteLock implements ReadWriteLock{...}
			ReadWriteLock显式锁实现了一种标准的互斥锁：每次最多只能有一个线程能持有lock。互斥通常是一种过于强硬的加锁规则，因此也就不必要地限制了并发性。在多数情况下，数据结构上的操作大部分都是"读操作"，此时如果能够放宽加锁要求，运行多个执行读操作的线程可以同时访问数据机构，那么将提升程序的性能。
			只要每个线程都能确保读取到最新的数据，并且在读取数据时不会有其它线程修改数据，那么就不会发生问题。在这种情况下就可以使用读-写锁：一个资源可以被多个读操作访问，或者被一个写操作访问，但两者不能同时进行。
			ReadWriteLock可以采用多种不同的实现方式，这些方式在性能、调度保证、获取优先性、公平性以及加锁语义等方面可能有所不同。ReadWriteLock中一些可选实现包括：
				1.释放优先：当一个写线程释放写入锁时，如果队列中同时存在读线程和写线程，那么应该按什么规则优先选择哪个？
				2.读线程插队：如果锁是由读线程持有，但是有写线程在等待，那么新到达的读线程能否立即获得访问权，还是应该在写线程后面等待？
				3.重入性：同一个线程的读锁和写锁是否是可重入的？
				4.降级：如果一个线程已持有写入锁，那么它能否在不释放该锁的情况下获得读锁？这可能会使得写入锁被"降级"为读锁，同时不允许其它写入线程修改被保护的资源。
				5.升级：读取锁是否能优先于其它正在等待的读线程和写线程进而升级为一个写入锁？
				
			ReentrantReadWriteLock默认无参的构造方法选择的是一个非公平锁
			与内置锁相比，显式的Lock提供了一些扩展功能，在处理锁的不可用性方面有着更高的灵活性，并且对队列行有着更好的控制。但ReentrantLock不能完全替代Synchronized，只有在Synchronized无法满足需求时，才应该使用它。
			读-写锁允许多个线程并发地访问被保护的对象，当访问以读取操作为主的数据结构时，它能提高程序的可伸缩性。
			
==============================================================================================================================
构建自定义的同步工具

	创建状态依赖类的简单方法通常是在类库中现有状态依赖类的基础上进行构造。例如可以使用阻塞队列、ConcurrentHashMap等作为基础，如果这些已有的并发安全的类库没有提供所需要的功能，那么还可以使用java语言和类库提供的底层机制来构造自己的同步机制，这些方法包括内置的条件队列、显式的Condition对象以及AbastractQueuedSynchronizer框架。本章将介绍实现状态依赖性的各种选择，以及在使用平台提供的状态依赖性机制时需要遵守的各项规则。
	
	14.1状态依赖性的管理：
		在单线程中调用一个方法，如果某个基于状态的前提条件未得到满足(例如"连接池必须非空")，那么这个条件将永远无法成真。因此在编写顺序程序时中的类时，要使得这些类在它们的前提条件未被满足时就失败是很容易的。但是在并发程序中，基于状态的条件可能会由于其它线程的操作而改变：一个资源池可能几条指令之前还是空的，但现在却突然变为非空的，因为另一个线程可能会返回一个元素到资源池、对于并发对象上依赖状态的方法，虽然有时候在前提条件不满足的情况下不会失败，但通常有一种更好的选择，即等待前提条件变为真。
		依赖状态的操作可以一直阻塞直到可以继续执行，这比使它们先失败再实现起来要更为方便且不易出错。内置的条件队列可以使线程一直阻塞，直到对象进入某个进程可以继续执行的状态，并且当被阻塞的线程可以执行时再唤醒它们。
	14.1.3 条件队列：
		"条件队列"这个名字来源于：它使得一组线程(称之为等待线程集合)能够通过某种方式来等待特定的条件变成真。传统队列的元素是一个个数据，而与之不同的是，条件队列中的元素是一个个正在等待相关条件的线程。
		正如每个java对象都可以作为一个锁，每个对象同样也可以作为一个条件队列，并且Object中的wait、notify、notifyAll方法就构成了内部条件队列的API。对象的内置锁与其内部条件队列是相互关联的，要调用对象obj中条件队列的任何一个方法，就必须持有obj上的锁。这是因为"等待由状态构成的条件"与"维护状态一致性"这两种机制必须被紧密地绑定在一起：只有能对状态进行检查时，才能在某个条件上等待，并且只有能修改状态时，才能从条件等待中释放另一个线程。
		Object.wait会自动释放锁，并请求OS挂起当前线程，从而使其它线程能够获得这个锁并修改对象的状态。当被挂起的线程醒来时，它将在返回之前重新获取锁。从直观上来理解，调用wait意味着"我要去休息了，但当发生特定的事情时唤醒我"，而调用通知方法Object.wait/Object.waitAll就意味着"特定的事情发生了"
		条件队列比使用"休眠"的有界缓存更加简单，并且高效，条件队列只是在CPU效率、上下文切换、响应性等多个方面都进行了优化，而且如果某个功能无法通过'轮询和休眠'来实现，那么使用条件队列也无法实现。这是一个较大的改进。条件队列使得在表达和管理状态依赖性时更加简单和高效。
		
			

	
	
