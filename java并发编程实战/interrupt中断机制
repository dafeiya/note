Java多线程之interrupt()的深度研究
　　近期学习Java多线程的中断机制，网上的帖子说得很浅，并没深究其原理。看了Java源码，对Java的中断机制有了略深入的理解，在这篇文章中向感兴趣的网友分享下。这篇文章主要通过一个典型例子对中断机制进行剖析。

　　一：一些概念和重要方法

　　interrupt status(中断状态)：请记住这个术语，中断机制就是围绕着这个字段来工作的。在Java源码中代表中断状态的字段是：private volatile Interruptible blocker;对“Interruptible”这个类不需要深入分析，对于“blocker”变量有以下几个操作。

　　1.默认blocker=null;　®1

　　2.调用方法“interrupt0();”将会导致“该线程的中断状态将被设置(JDK文档中术语)”。®2

　　3.再次调用“interrupt0();”将会导致“其中断状态将被清除(同JDK文档中术语)”®3

　　注：这三点很重要，接下来文章中会用来®1®2®3代替。

明白了第一点来看下文档中对于中断线程相关方法的描述。

　　1.public void interrupt();

　　　　中断线程。如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法

　　过程中受阻，则其中断状态将被清除，它还将收到一个 InterruptedException。　

　　2.public static boolean interrupted();

　　　　测试当前线程是否已经中断。线程的中断状态 由该方法清除。线程中断被忽略，因为在中断时不处于活动状态的线程将由此返回 false 的方法反映出来。

      返回：
    如果当前线程已经中断，则返回 true；否则返回 false。
      另请参见：
isInterrupted()
　　3.public boolean isInterrupted();

　　　　测试线程是否已经中断。线程的中断状态 不受该方法的影响。线程中断被忽略，因为在中断时不处于活动状态的线程将由此返回 false 的方法反映出来。

　　返回：如果该线程已经中断，则返回 true；否则返回 false。

　　另请参见：interrupted()

　　<!--来自JDK API文档-->

　　　　以上三段中关于线程的中断状态 由该方法清除的描述，在源码层面就是®3调用。
