WPF开发基础
    Windows Presentation Foundation (WPF) 是一个可创建桌面客户端应用程序的 UI 框架。它是 .NET Framework的子集，WPF使用可扩展应用程序标记语言 (XAML) 
为应用程序编程提供声明性模型

XAML:
    XAML是扩展应用标记语言的简写，(发音 zen mel)，是一种用于实例化.net应用的标记语言。主要用于构建WPF的用户界面。
  xaml文件在WPF应用中组成各种面板按钮控件等布局。xaml和C#代码是各自相互补充的技术，但实际上二者都是彼此独立的。
  创建WPF应用有多种方式：
    1.单独使用C#代码也可创建WPF项目，可参考Java AWT/Swing技术
    2.使用代码和未经编译的xaml文档可创建WPF项目，即使用C#代码动态地使用文件流的方式读取并加载xaml文档然后对xaml中定义的元素初始化到代码中创建的窗体中
  
    xaml文档中只能有一个顶级元素，常用顶级元素有：Window、Page、Application等。Window元素只能包含一个内部元素。顶级元素中有一系列的命名空间声明，其中x:Class用于
  声明与当前xaml相绑定的隐藏类文件。窗体相绑定的构造函数中有一个InitializeComponent()方法，用于自动初始化当前窗体的信息。
    this用于指代当前的对象，对于从xaml文件相绑定的隐藏类而言即为该窗体对象。对于xaml文档中具有Name属性的控件可以直接初始化并作为参数直接调用。
    
    xaml文档属于XML的范畴，因此不能使用XML中的特殊字符，对于特殊字符必须进行转义处理，处理方式可参考HTML
    元素中可以有附加属性，附加属性用于其它元素与当前元素产生关联时使用，一般为元素中"属性.属性"的方式使用
WPF的布局：
    WPF的布局原则：WPF是通过容器控件来进行布局的,以下原则反应了WPF整体的设计目标，遵循合理的布局原则可以设计出更灵活且易于维护的项目
        1.不应当用显式地为元素设定设定绝对值来进行布局，因为WPF自身有较好的布局控制，显式设置尺寸会冒险创建一个更加不稳定的布局，这种布局很难适应变化，
         并且可能剪裁其它的元素内容
        2.不应当使用平布的方式进行布局，元素应该由它们的布局容器根据元素的尺寸、顺序，以及其它特定于容器布局的信息来进行安排
            Margin="10,20,40,30",为元素周围留出一定的空间，按照左、上、右、下设置
        3.布局容器和它们的子元素共享可使用的空间，如果空间允许，布局元素应该尽可能要为所含的元素设置更为合适的尺寸
        4.可以通过嵌套布局容器来实现复杂的界面元素
        5.布局并非由布局元素决定整体结构，但内部元素也可以设置自身相对于布局容器的位置
     WPF常用布局容器：
        1.StackPanel堆栈面板：
            最简单的布局容器，StackPanel面板可以在单行或者单列中以堆栈的形式放置内部的子元素，超出容器范围的内部元素会被遮蔽
            Orientation属性设置内部元素的竖直或水平排列方式；
            内部元素的HorizontalAlignment属性可以设置内部元素相对于容器的位置；
            Border元素：Border元素并非布局元素，但常与面板布局控件一起使用，Border元素只能包含一个嵌套的布局内容，通常是布局面板，Boder用于为面板添加背景
                或者在其周围添加边框。
                CornerRadius属性设置边角的圆滑度；BorderThickness属性设置边框的宽度；Padding设置边框内侧和内部面板的间距；Background设置背景
        2.WrapPanel面板和DockPanel面板：
            这两个布局容器与StackPanel性质类似，但扩展了一些特性作为对StackPanel面板进行补充
            WrapPanel:
            DockerPanel:  
                为内部元素提供了DockPanel.Dock附加属性设置元素相对于容器的位置，多个元素时，先设置的元素优先占有空间，剩余的元素一次占用余下的空间
                建议在堆栈面板性质的容器中优先使用
        3.Grid面板：
            WPF中最强大的面板，任何其它面板可以实现的布局Grid都可以实现，Grid面板可以将窗口分割成更小区域的不可见的网格中，是用于分割空间的理想工具。
            1.已下代码将Grid划分为两行三列，并将Button按钮放置到第2行第2个单元格中,并合并1行和1列
            <Grid ShowGridLines="True" UseLayoutRounding="True">
                <Grid.RowDefinitions >
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="2*"></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Button Content="Button" Name="button1" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Grid.RowSpan="2" VerticalAlignment="Center"  />
            </Grid> 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
